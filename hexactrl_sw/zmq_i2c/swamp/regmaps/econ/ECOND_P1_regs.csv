Register Name,Register Address,Register Width,Register Access,Register Reset Value,Register Constraints,Register Custom Type,Field Name,Field Offset,Field Width,Field Access,Field Reset Value,Field is Covered,Field is Reserved,Field is Volatile,Field Constraints,Register Description,Field Description
RW_CHAL_xx_ALL_w0,,8,RW,,,,per_ch_align_en,0,1,,0x1,TRUE,FALSE,FALSE,,,Enables channel aligner sequence [0: disabled; 1: enabled] (for Automatic alignment mode also set snapshot_arm=0; snapshot_en=1; i2c_snapshot_en=0 and sel_override_en=0)
RW_CHAL_xx_ALL_w0,,8,RW,,,,sel_override_en,1,1,,0x0,TRUE,FALSE,FALSE,,,Enables the override of the select value with the value provided in sel_override_val [0: disabled (for Automatic Alignment); 1: enabled (for Manual Alignment)]
RW_CHAL_xx_ALL_w0,,8,RW,,,,patt_en,2,1,,0x0,TRUE,FALSE,FALSE,,,Enables a test (PRBS of user_words) pattern to be sent to the input of the channel aligner in place of data from ePortRx [0: disabled; 1: enabled]
RW_CHAL_xx_ALL_w0,,8,RW,,,,prbs28_en,3,1,,0x0,TRUE,FALSE,FALSE,,,Selects the pattern to be inserted in the PRBS generation [0: PRBS pattern 32 bits; 1: PRBS pattern is {4-bit header; PRBS [31:4]}]. The PRBS generator use the polynomial x^15 + x^14 + 1 and seed is set by the seed_in field
RW_CHAL_xx_ALL_w0,,8,RW,,,,patt_sel,4,1,,0x0,TRUE,FALSE,FALSE,,,Selection of test pattern to be sent to the input of the channel aligner [0: PRBS pattern each cycle; 1: cyclically transmit user_word_0->user_word_1->user_word_2->user_word_3]
RW_CHAL_xx_ALL_w0,,8,RW,,,,prbs_chk_en,5,1,,0x0,TRUE,FALSE,FALSE,,,Enables the aligner PRBS checker [1: enabled; 0: disabled]. The checker expects a PRBS with polynomial x^15 + x^14 + 1 and seed is set by the seed_in field. Errors indicated in prbs_chk_err and counted in prbs_chk_err_cnt registers
RW_CHAL_xx_ALL_w0,,8,RW,,,,force_ch_outputs,6,1,,0x0,TRUE,FALSE,FALSE,,,Enables user_word_0 pattern at the output of the channel aligner [1: enabled; 0: disabled]
RW_CHAL_xx_ALL_w0,,8,RW,,,,RSVD0,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_CHAL_xx_ALL_w1,,8,RW,,,,sel_override_val,0,8,,0x0,TRUE,FALSE,FALSE,,,The value for the alignment select register to be used when sel_override_en=1
RW_CHAL_xx_ALL_w2,,8,RW,,,,seed_in,0,8,,0x0,TRUE,FALSE,FALSE,,,Value loaded into the Linear Feeback Shift Register for the internal PRBS pattern generator. The value is padded to 15 bits by adding a leading 0
RW_CHAL_xx_ALL_w3,,8,RW,,,,seed_in,0,6,,0x0,TRUE,FALSE,FALSE,,,Value loaded into the Linear Feeback Shift Register for the internal PRBS pattern generator. The value is padded to 15 bits by adding a leading 0
RW_CHAL_xx_ALL_w3,,8,RW,,,,RSVD1,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_CHAL_xx_ALL_w4,,8,RW,,,,user_word_0,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Transmitted from output of aligner while alignment procedure is active or when force_ch_outputs=1. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w5,,8,RW,,,,user_word_0,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Transmitted from output of aligner while alignment procedure is active or when force_ch_outputs=1. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w6,,8,RW,,,,user_word_0,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Transmitted from output of aligner while alignment procedure is active or when force_ch_outputs=1. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w7,,8,RW,,,,user_word_0,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Transmitted from output of aligner while alignment procedure is active or when force_ch_outputs=1. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w8,,8,RW,,,,user_word_1,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w9,,8,RW,,,,user_word_1,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w10,,8,RW,,,,user_word_1,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w11,,8,RW,,,,user_word_1,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w12,,8,RW,,,,user_word_2,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w13,,8,RW,,,,user_word_2,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w14,,8,RW,,,,user_word_2,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w15,,8,RW,,,,user_word_2,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w16,,8,RW,,,,user_word_3,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w17,,8,RW,,,,user_word_3,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w18,,8,RW,,,,user_word_3,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RW_CHAL_xx_ALL_w19,,8,RW,,,,user_word_3,0,8,,0x0,TRUE,FALSE,FALSE,,,The 32-bit word for test patterns. Sent as input to aligner in place of ePortRx data outputs when patt_en=1 and patt_sel=1 (transmitted cyclically every 4th BX: user_word_0->user_word_1->user_word_2->user_word_3)
RO_CHAL_xx_ALL_w0,,8,RO,,,,pattern_match,0,1,,0x0,TRUE,FALSE,TRUE,,,Status of Alignment [0: alignment pattern not found in snapshot; 1: alignment pattern found in snapshot]
RO_CHAL_xx_ALL_w0,,8,RO,,,,snapshot_dv,1,1,,0x0,TRUE,FALSE,TRUE,,,Status of Snapshot [0: snapshot not taken; 1: snapshot taken]
RO_CHAL_xx_ALL_w0,,8,RO,,,,hdr_mm_err,2,1,,0x0,TRUE,FALSE,TRUE,,,Status 1: incorrect header (not matching idle_hdr_val) observed at BX!=1
RO_CHAL_xx_ALL_w0,,8,RO,,,,spare_err,3,1,,0x0,TRUE,FALSE,TRUE,,,
RO_CHAL_xx_ALL_w0,,8,RO,,,,orbsyn_hdr_err,4,1,,0x0,TRUE,FALSE,TRUE,,,Status 1: incorrect special header observed (not matching orbsyn_hdr_val)
RO_CHAL_xx_ALL_w0,,8,RO,,,,orbsyn_arr_err,5,1,,0x0,TRUE,FALSE,TRUE,,,Status 1: a second BCR fast command was received
RO_CHAL_xx_ALL_w0,,8,RO,,,,orbsyn_fc_err,6,1,,0x0,TRUE,FALSE,TRUE,,,Status 1: BCR fast command is missing
RO_CHAL_xx_ALL_w0,,8,RO,,,,prbs_chk_err,7,1,,0x0,TRUE,FALSE,TRUE,,,Status 1: error observed by the aligner PRBS checker
RO_CHAL_xx_ALL_w1,,8,RO,,,,select,0,8,,0x20,TRUE,FALSE,TRUE,,,Offset for location within 192-bit shift register from which channel aligner selects the 32-bit word. In Automatic Alignment this is the location of the MSB of the special header within the snapshot. Valid range is from 32 to 160 in Automatic alignment
RO_CHAL_xx_ALL_w2,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w3,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w4,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w5,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w6,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w7,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w8,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w9,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w10,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w11,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w12,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w13,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w14,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w15,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w16,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w17,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w18,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w19,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w20,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w21,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w22,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w23,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w24,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w25,,8,RO,,,,snapshot,0,8,,0x0,TRUE,FALSE,TRUE,,,Snapshot of 192-bit shift register of aligner. Snapshot can be triggered via LinkResetROC (in Automatic and Manual modes) or through a snapshot_arm (in i2c_trigger mode)
RO_CHAL_xx_ALL_w26,,8,RO,,,,hdr_mm_cntr,0,8,,0x0,TRUE,FALSE,TRUE,,,Header mismatch error counter. Error counter for incorrect regular header (BX!=1). Reset by err_clr (RW_MISC_ALL.misc_rw_0[0])
RO_CHAL_xx_ALL_w27,,8,RO,,,,hdr_mm_cntr,0,8,,0x0,TRUE,FALSE,TRUE,,,Header mismatch error counter. Error counter for incorrect regular header (BX!=1). Reset by err_clr (RW_MISC_ALL.misc_rw_0[0])
RO_CHAL_xx_ALL_w28,,8,RO,,,,orbsyn_hdr_err_cnt,0,8,,0x0,TRUE,FALSE,TRUE,,,Error counter for incorrect special header observed (not matching orbsyn_hdr_val). Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]). Saturates to 255
RO_CHAL_xx_ALL_w29,,8,RO,,,,orbsyn_arr_err_cnt,0,8,,0x0,TRUE,FALSE,TRUE,,,Error counter for extra BCR fast command. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]). Saturates to 255
RO_CHAL_xx_ALL_w30,,8,RO,,,,orbsyn_fc_err_cnt,0,8,,0x0,TRUE,FALSE,TRUE,,,Error counter for missing BCR fast command. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]). Saturates to 255
RO_CHAL_xx_ALL_w31,,8,RO,,,,prbs_chk_err_cnt,0,8,,0x0,TRUE,FALSE,TRUE,,,Error counter for internal PRBS check. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]). Saturates to 255
RO_CHAL_xx_ALL_w32,,8,RO,,,,tmr_err_cnt_chan_aligner,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset
RO_CHAL_xx_ALL_w33,,8,RO,,,,tmr_err_cnt_chan_err,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset
RO_CHAL_xx_ALL_w34,,8,RO,,,,tmr_err_cnt_chan_eprxgrp,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset
WO_CHERR_xx_ALL_w0,,8,WO,,,,clr_on_read,0,1,,0x0,TRUE,FALSE,FALSE,,,Clear signal for errors on this individual channel (active high; self resetting)
WO_CHERR_xx_ALL_w0,,8,WO,,,,wren_err,1,1,,0x0,TRUE,FALSE,FALSE,,,Enables writing into err_dat register for this individual channel (data taken from value in ERRTOP.err_wr_data) [1: enabled; 0: disabled]
WO_CHERR_xx_ALL_w0,,8,WO,,,,wren_msk,2,1,,0x0,TRUE,FALSE,FALSE,,,Enables setting the mask for this individual channel (mask value taken from ERRTOP.err_wr_data) [1: enabled; 0: disabled]
WO_CHERR_xx_ALL_w0,,8,WO,,,,RSVD0,3,5,,0x0,FALSE,TRUE,FALSE,,,
RO_CHERR_xx_ALL_w0,,8,RO,,,,err_raw_dat,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_CHERR_xx_ALL_w0,,8,RO,,,,RSVD0,6,2,,0x0,FALSE,TRUE,TRUE,,,
RO_CHERR_xx_ALL_w1,,8,RO,,,,msk_dat,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_CHERR_xx_ALL_w1,,8,RO,,,,RSVD1,6,2,,0x0,FALSE,TRUE,TRUE,,,
RO_CHERR_xx_ALL_w2,,8,RO,,,,err_dat,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_CHERR_xx_ALL_w2,,8,RO,,,,err_out,6,1,,0x0,TRUE,FALSE,TRUE,,,
RO_CHERR_xx_ALL_w2,,8,RO,,,,RSVD2,7,1,,0x0,FALSE,TRUE,TRUE,,,
RW_CHEPRXGRP_xx_ALL_w0,,8,RW,,,,dllResetReq,0,1,,0x0,TRUE,FALSE,FALSE,,,Reset the master DLL in ePortRxGroup (used only for debugging). Default value: 0
RW_CHEPRXGRP_xx_ALL_w0,,8,RW,,,,resetChannels,1,1,,0x0,TRUE,FALSE,FALSE,,,Request phase training for a given channel. The user has to generate a positive pulse on this bit (set to 1 and then set to 0)
RW_CHEPRXGRP_xx_ALL_w0,,8,RW,,,,trainChannel,2,1,,0x0,TRUE,FALSE,FALSE,,,Request phase training for a given channel. The user has to generate a positive pulse on this bit (set to 1 and then set to 0)
RW_CHEPRXGRP_xx_ALL_w0,,8,RW,,,,phaseSelectChannel0input,3,4,,0x0,TRUE,FALSE,FALSE,,,Selects the phase for the selected channel (0-14). Only used if RW_EPRXGRP_TOP_ALL.trackMode is in fixed_phase or continuous_tracking_with_initial_phase modes
RW_CHEPRXGRP_xx_ALL_w0,,8,RW,,,,RSVD0,7,1,,0x0,FALSE,TRUE,FALSE,,,
RO_CHEPRXGRP_xx_ALL_w0,,8,RO,,,,dllState,0,2,,0x0,TRUE,FALSE,TRUE,,,State of initialization state machine (0: Reset; 1: Force down; 2: Confirm early state; 3:Free running state)
RO_CHEPRXGRP_xx_ALL_w0,,8,RO,,,,phaseSelectChannel0output,2,4,,0x0,TRUE,FALSE,TRUE,,,Currently selected phases for the channel
RO_CHEPRXGRP_xx_ALL_w0,,8,RO,,,,dllInstantLock,6,1,,0x0,TRUE,FALSE,TRUE,,,Instant lock signal from the DLL (not useful)
RO_CHEPRXGRP_xx_ALL_w0,,8,RO,,,,channelLocked,7,1,,0x0,TRUE,FALSE,TRUE,,,Status of phase selection logic for channels. Logic value of 1 means that the channel is locked. This bit is always high if the static mode selection is used
RO_CHEPRXGRP_xx_ALL_w1,,8,RO,,,,dllLocked,0,1,,0x0,TRUE,FALSE,TRUE,,,Status of the DLL (0:unlocked; 1:locked)
RO_CHEPRXGRP_xx_ALL_w1,,8,RO,,,,dllLockFilterState,1,2,,0x0,TRUE,FALSE,TRUE,,,State of lock filter state machine(0:Unlocked State; 1:Confirm Lock State; 2:Locked State; 3:Confirm Unlock State)
RO_CHEPRXGRP_xx_ALL_w1,,8,RO,,,,dllLossOfLockCount,3,5,,0x0,TRUE,FALSE,TRUE,,,Loss of Lock counter value for the DLL Lock Filter State machine. The counter rolls over. The counter is reset only by hardreset
RW_ALIGNER_ALL_w0,,8,RW,,,,snapshot_arm,0,1,,0x0,TRUE,FALSE,FALSE,,,Arms snapshot with a 0->1 transition for this bit in i2c trigger alignment mode. For this alignment mode also set per_ch_align_en=0; set snapshot_en=1 and i2c_snapshot_en=1. The snapshot will be taken on the next BC counter == ORBSYN_CNT_SNAPSHOT
RW_ALIGNER_ALL_w0,,8,RW,,,,snapshot_en,1,1,,0x1,TRUE,FALSE,FALSE,,,Enables snapshot operation [1: enabled; 0: disabled] (for Manual alignment mode also set per_ch_align_en=0; snapshot_arm=0; i2c_snapshot_en=0 - for Automatic alignment mode also set per_ch_align_en=1; snapshot_arm=0; i2c_snapshot_en=0 - for i2c trigger mode also set per_ch_align_en=0; a 0->1 transition to snapshot_arm; i2c_snapshot_en=1;)
RW_ALIGNER_ALL_w0,,8,RW,,,,i2c_snapshot_en,2,1,,0x0,TRUE,FALSE,FALSE,,,Enables manual triggering on 192-bit i2c snapshot [0: disabled; 1: enabled] (for i2c trigger alignment mode also set per_ch_align_en=0 and set snapshot_en=1). The snapshot is armed by a 0->1 transition on the snapshot_arm bit
RW_ALIGNER_ALL_w0,,8,RW,,,,dbg_fc_cnt_clr,3,1,,0x0,TRUE,FALSE,FALSE,,,Clears FC debug counters (dbg_*) (0: do not clear; 1: active reset). Need to write to 1 and 0 afterwards
RW_ALIGNER_ALL_w0,,8,RW,,,,freeze_aligner_output_enable,4,1,,0x1,TRUE,FALSE,FALSE,,,Enables the freezing of channel aligners outputs if the PLL is not locked or any of the active channels (eRX) is not locked. [0: disabled - channel aligners outputs propagate to the core logic; 1: enabled - channel aligner outputs gated to '0']
RW_ALIGNER_ALL_w0,,8,RW,,,,freeze_aligner_output_enable_all_channels_locked,5,1,,0x1,TRUE,FALSE,FALSE,,,Enables the freezing of channel aligners outputs if any of the active channels (eRX) is not locked. [0: disabled - channel aligners outputs propagate to the core logic; 1: enabled - channel aligner outputs gated to '0']
RW_ALIGNER_ALL_w0,,8,RW,,,,RSVD0,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ALIGNER_ALL_w1,,8,RW,,,,match_pattern_val,0,8,,0xaa,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w2,,8,RW,,,,match_pattern_val,0,8,,0xaa,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w3,,8,RW,,,,match_pattern_val,0,8,,0xaa,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w4,,8,RW,,,,match_pattern_val,0,8,,0x9a,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w5,,8,RW,,,,match_pattern_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w6,,8,RW,,,,match_pattern_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w7,,8,RW,,,,match_pattern_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w8,,8,RW,,,,match_pattern_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Training pattern that should match what is sent by HGCROC when issuing a link_reset_ROC fast command. It should be used as {header[3:0]; body[27:0]; special_header[3:0]; body[27:0]}
RW_ALIGNER_ALL_w9,,8,RW,,,,match_mask_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w10,,8,RW,,,,match_mask_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w11,,8,RW,,,,match_mask_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w12,,8,RW,,,,match_mask_val,0,8,,0x0,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w13,,8,RW,,,,match_mask_val,0,8,,0xff,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w14,,8,RW,,,,match_mask_val,0,8,,0xff,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w15,,8,RW,,,,match_mask_val,0,8,,0xff,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w16,,8,RW,,,,match_mask_val,0,8,,0xff,TRUE,FALSE,FALSE,,,Used only in Auto Alignment mode. 64-bit mask that is used to indicate which bits of the match_pattern_val should be compared to the 64 select pattern inside the 192-bit snapshot (0: compare enabled; 1: compare disabled)
RW_ALIGNER_ALL_w17,,8,RW,,,,orbsyn_hdr_val,0,4,,0x9,TRUE,FALSE,FALSE,,,Special header value used only for monitoring purposes. After alignment is done it should match special header sent by the HGCROC. Mismatches indicated in orbsyn_hdr_err and counted in orbsyn_hdr_err_cnt registers
RW_ALIGNER_ALL_w17,,8,RW,,,,orbsyn_hdr_mask,4,4,,0x0,TRUE,FALSE,FALSE,,,4-bit mask that is used only for monitoring purposes. It indicates which bits of the orbsyn_hdr_val should be monitored (0: monitor enabled; 1: monitor disabled)
RW_ALIGNER_ALL_w18,,8,RW,,,,idle_hdr_val,0,4,,0xa,TRUE,FALSE,FALSE,,,Header value used only for monitoring purposes. After alignment is done it should match header sent by the HGCROC. Mismatches indicated in hdr_mm_err and counted in hdr_mm_cntr registers
RW_ALIGNER_ALL_w18,,8,RW,,,,idle_hdr_mask,4,4,,0x0,TRUE,FALSE,FALSE,,,4-bit mask that is used only for monitoring purposes. It indicates which bits of the idle_hdr_val should be monitored [0: monitor enabled; 1: monitor disabled]
RW_ALIGNER_ALL_w19,,8,RW,,,,orbsyn_cnt_max_val,0,8,,0xeb,TRUE,FALSE,FALSE,,,Sets the maximum value of bunch counter. BX counter rollover.
RW_ALIGNER_ALL_w20,,8,RW,,,,orbsyn_cnt_max_val,0,4,,0xd,TRUE,FALSE,FALSE,,,Sets the maximum value of bunch counter. BX counter rollover.
RW_ALIGNER_ALL_w20,,8,RW,,,,orbsyn_cnt_load_val,4,4,,0x9,TRUE,FALSE,FALSE,,,Sets the value that the ECON internal bunch counter is reset to when a BCR Fast Command is issued
RW_ALIGNER_ALL_w21,,8,RW,,,,orbsyn_cnt_load_val,0,8,,0xdb,TRUE,FALSE,FALSE,,,Sets the value that the ECON internal bunch counter is reset to when a BCR Fast Command is issued
RW_ALIGNER_ALL_w22,,8,RW,,,,orbsyn_cnt_snapshot,0,8,,0x2,TRUE,FALSE,FALSE,,,Sets the value of the internal bunch counter at which the snapshot occurs
RW_ALIGNER_ALL_w23,,8,RW,,,,orbsyn_cnt_snapshot,0,4,,0x0,TRUE,FALSE,FALSE,,,Sets the value of the internal bunch counter at which the snapshot occurs
RW_ALIGNER_ALL_w23,,8,RW,,,,RSVD1,4,4,,0x0,FALSE,TRUE,FALSE,,,
RO_ALIGNER_ALL_w0,,8,RO,,,,done,0,1,,0x0,TRUE,FALSE,TRUE,,,Status of Alignment procedure [0: not done; 1: done]
RO_ALIGNER_ALL_w0,,8,RO,,,,dbg_lreset_rcvd,1,1,,0x0,TRUE,FALSE,TRUE,,,Debug register: link-reset-ROC was received
RO_ALIGNER_ALL_w0,,8,RO,,,,dbg_orbsyn_rcvd,2,1,,0x0,TRUE,FALSE,TRUE,,,Debug register: BCR FC was received
RO_ALIGNER_ALL_w0,,8,RO,,,,dbg_fc_cnt,3,5,,0x0,TRUE,FALSE,TRUE,,,Debug register to count the number of BX between the link-reset-ROC and BCR fast commmand
RO_ALIGNER_ALL_w1,,8,RO,,,,tmr_err_cnt_aligner,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset
RW_ERRTOP_ALL_w0,,8,RW,,,,clr_on_read_top,0,1,,0x0,TRUE,FALSE,FALSE,,,Clear errors for top-level error monitoring (0=do not clear; 1=active reset). Even if the individual CHERR_xx err_dat is cleared; the error bit will stay high until cleared with this register.
RW_ERRTOP_ALL_w0,,8,RW,,,,wren_err_top,1,1,,0x0,TRUE,FALSE,FALSE,,,Enables write into err_dat_top register [1: enable write; 0: disable write].
RW_ERRTOP_ALL_w0,,8,RW,,,,wren_msk_top,2,1,,0x0,TRUE,FALSE,FALSE,,,Enables setting the mask for the err_data_top register [1: enable mask; 0: disable mask].
RW_ERRTOP_ALL_w0,,8,RW,,,,RSVD0,3,5,,0x0,FALSE,TRUE,FALSE,,,
RW_ERRTOP_ALL_w1,,8,RW,,,,wr_data_top,0,8,,0x0,TRUE,FALSE,FALSE,,,Value to be written into either error mask or error status registers. For example to set the mask of err_dat_top: write into wr_data_top and then set wren_msk_top to (1->0). For masks: (0: error bit will be masked or ignored; 1: error will not be masked and will be used in the last bit of err_dat_top). For error status written for debugging purposes: write the error bits into wr_data_top and then set wren_err_top to (1->0).
RW_ERRTOP_ALL_w2,,8,RW,,,,wr_data_top,0,4,,0x0,TRUE,FALSE,FALSE,,,Value to be written into either error mask or error status registers. For example to set the mask of err_dat_top: write into wr_data_top and then set wren_msk_top to (1->0). For masks: (0: error bit will be masked or ignored; 1: error will not be masked and will be used in the last bit of err_dat_top). For error status written for debugging purposes: write the error bits into wr_data_top and then set wren_err_top to (1->0).
RW_ERRTOP_ALL_w2,,8,RW,,,,RSVD1,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ERRTOP_ALL_w3,,8,RW,,,,err_wr_data,0,6,,0x0,TRUE,FALSE,FALSE,,,Value to be written into CHERR_*msk registers.
RW_ERRTOP_ALL_w3,,8,RW,,,,RSVD2,6,2,,0x0,FALSE,TRUE,FALSE,,,
RO_ERRTOP_ALL_w0,,8,RO,,,,msk_dat_top,0,8,,0x0,TRUE,FALSE,TRUE,,,Reads the mask for the err_dat error signals.
RO_ERRTOP_ALL_w1,,8,RO,,,,msk_dat_top,0,4,,0x0,TRUE,FALSE,TRUE,,,Reads the mask for the err_dat error signals.
RO_ERRTOP_ALL_w1,,8,RO,,,,RSVD0,4,4,,0x0,FALSE,TRUE,TRUE,,,
RO_ERRTOP_ALL_w2,,8,RO,,,,err_dat_top,0,8,,0x0,TRUE,FALSE,TRUE,,,The CHERR_xx_err_dat error signals (bits num_CH:0). The last bit contains the common aligner error status (OR of all CHERR_xx_err_dat signals). The errors are latched such that even if the individual CHERR signals get cleared; the corresponding bit in err_dat_top remains uncleared.
RO_ERRTOP_ALL_w3,,8,RO,,,,err_dat_top,0,4,,0x0,TRUE,FALSE,TRUE,,,The CHERR_xx_err_dat error signals (bits num_CH:0). The last bit contains the common aligner error status (OR of all CHERR_xx_err_dat signals). The errors are latched such that even if the individual CHERR signals get cleared; the corresponding bit in err_dat_top remains uncleared.
RO_ERRTOP_ALL_w3,,8,RO,,,,err_out_top,4,1,,0x0,TRUE,FALSE,TRUE,,,Reads the OR of all bits in err_dat_top.
RO_ERRTOP_ALL_w3,,8,RO,,,,RSVD1,5,3,,0x0,FALSE,TRUE,TRUE,,,
RO_ERRTOP_ALL_w4,,8,RO,,,,tmr_err_cnt_err_top,0,8,,0x0,TRUE,FALSE,TRUE,,,
RW_EPRXGRP_TOP_ALL_w0,,8,RW,,,,dllCurrentSet,0,2,,0x1,TRUE,FALSE,FALSE,,,Current for the DLL charge pump (0:1uA; 1:2uA; 2:4uA; 3:8uA; default: 1).
RW_EPRXGRP_TOP_ALL_w0,,8,RW,,,,dllCoarseLockDetection,2,1,,0x1,TRUE,FALSE,FALSE,,,Use coarse detector for the DLL lock condition (default: 1)
RW_EPRXGRP_TOP_ALL_w0,,8,RW,,,,dataGatingEnable,3,1,,0x1,TRUE,FALSE,FALSE,,,Enable data gating [1: enabled; 0: disabled]. When the data gating is enabled the ePortRx group consumes less power. This is a recommended mode of operation.
RW_EPRXGRP_TOP_ALL_w0,,8,RW,,,,trackMode,4,2,,0x1,TRUE,FALSE,FALSE,,,Sets the phase tracking mode for group (0: fixed phase; 1: Initial training; 2: Continuous phase tracking; 3: Continuous phase tracking with initial phase) (default: 1)
RW_EPRXGRP_TOP_ALL_w0,,8,RW,,,,dllLockThreshold,6,2,,0x1,TRUE,FALSE,FALSE,,,Sets the lock threshold value of the instant lock low pass filter for ePortRx DLL's. The number of 40 MHz clock cycles is set to 2^{7-dllLockThreshold} (default: 5)
RW_EPRXGRP_TOP_ALL_w1,,8,RW,,,,dllLockThreshold,0,1,,0x1,TRUE,FALSE,FALSE,,,Sets the lock threshold value of the instant lock low pass filter for ePortRx DLL's. The number of 40 MHz clock cycles is set to 2^{7-dllLockThreshold} (default: 5)
RW_EPRXGRP_TOP_ALL_w1,,8,RW,,,,dllReLockThreshold,1,3,,0x5,TRUE,FALSE,FALSE,,,Sets the relock threshold value of the instant lock low pass filter for ePortRx DLL's. The number of 40 MHz clock cycles is set to 2^{7-dllReLockThreshold} (default: 5)
RW_EPRXGRP_TOP_ALL_w1,,8,RW,,,,dllUnLockThreshold,4,3,,0x5,TRUE,FALSE,FALSE,,,Sets the unlock threshold value of the instant lock low pass filter for ePortRx DLL's. The number of 40 MHz clock cycles is set to 2^{7-dllUnLockThreshold} (default: 5)
RW_EPRXGRP_TOP_ALL_w1,,8,RW,,,,dllConfirmCountSelect,7,1,,0x0,TRUE,FALSE,FALSE,,,Number of clock cycles (in the 40 MHz clock domain) to confirm locked state (0:1 cycle; 1: 4 cycles; 2: 16 cycles; 3: 31 cycles; default: 2)
RW_EPRXGRP_TOP_ALL_w2,,8,RW,,,,dllConfirmCountSelect,0,1,,0x1,TRUE,FALSE,FALSE,,,Number of clock cycles (in the 40 MHz clock domain) to confirm locked state (0:1 cycle; 1: 4 cycles; 2: 16 cycles; 3: 31 cycles; default: 2)
RW_EPRXGRP_TOP_ALL_w2,,8,RW,,,,dllInitSMForceClockEnable,1,1,,0x0,TRUE,FALSE,FALSE,,,Force clock of ePortRx DLL state machine to be always enabled (if 1: disables clock gating) [1: enable; 0: disabled].
RW_EPRXGRP_TOP_ALL_w2,,8,RW,,,,enableReInit,2,1,,0x0,TRUE,FALSE,FALSE,,,Enables the re-initialization of an ePortRxGroup when the phase-aligner state machine finds the phase-selection to be out of range [1: enable; 0: disable re-initialization].
RW_EPRXGRP_TOP_ALL_w2,,8,RW,,,,RSVD0,3,5,,0x0,FALSE,TRUE,FALSE,,,
RO_EPRXGRP_TOP_ALL_w0,,8,RO,,,,tmr_err_cnt_eprxgrp_top,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_FCTRL_ALL_w0,,8,RW,,,,EdgeSel_T1,0,1,,0x1,TRUE,FALSE,FALSE,,,Fast command clock edge sampling selection. Data input is sampled on the fast command clock rising (==1) or falling (==0) edge.
RW_FCTRL_ALL_w0,,8,RW,,,,PreL1AOffset,1,2,,0x0,TRUE,FALSE,FALSE,,,Number of BC between PRE L1A and corresponding L1A. PreL1AOffset==2'b00 disables the feature.
RW_FCTRL_ALL_w0,,8,RW,,,,invert_command_rx,3,1,,0x0,TRUE,FALSE,FALSE,,,Fast command data polarity. Data is considered active-high (==1) or active-low (==0).
RW_FCTRL_ALL_w0,,8,RW,,,,RSVD0,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_FCTRL_ALL_w1,,8,RW,,,,Capture_FCmd_Ctrl,0,8,,0x0,TRUE,FALSE,FALSE,,,Bitwise assignment of which fast command signals will trigger a status capture signal [0: BCR; 1: OCR; 2: L1A; 3: NZS; 4: CalPulseInt; 5: CalPulseExt; 6: EBR; 7: ECR; 8: LINK_RESET_ROC_T; 9: LINK_RESET_ROC_D; 10: LINK_RESET_ECON_T; 11: LINK_RESET_ECON_D; 12: SPARE_0; 13: SPARE_1; 14: SPARE_2; 15: SPARE_3; 16: SPARE_4; 17: SPARE_5; 18: SPARE_6; 19: SPARE_7; 20: UNASSIGNED; 21: fc_error]
RW_FCTRL_ALL_w2,,8,RW,,,,Capture_FCmd_Ctrl,0,8,,0x0,TRUE,FALSE,FALSE,,,Bitwise assignment of which fast command signals will trigger a status capture signal [0: BCR; 1: OCR; 2: L1A; 3: NZS; 4: CalPulseInt; 5: CalPulseExt; 6: EBR; 7: ECR; 8: LINK_RESET_ROC_T; 9: LINK_RESET_ROC_D; 10: LINK_RESET_ECON_T; 11: LINK_RESET_ECON_D; 12: SPARE_0; 13: SPARE_1; 14: SPARE_2; 15: SPARE_3; 16: SPARE_4; 17: SPARE_5; 18: SPARE_6; 19: SPARE_7; 20: UNASSIGNED; 21: fc_error]
RW_FCTRL_ALL_w3,,8,RW,,,,Capture_FCmd_Ctrl,0,6,,0x0,TRUE,FALSE,FALSE,,,Bitwise assignment of which fast command signals will trigger a status capture signal [0: BCR; 1: OCR; 2: L1A; 3: NZS; 4: CalPulseInt; 5: CalPulseExt; 6: EBR; 7: ECR; 8: LINK_RESET_ROC_T; 9: LINK_RESET_ROC_D; 10: LINK_RESET_ECON_T; 11: LINK_RESET_ECON_D; 12: SPARE_0; 13: SPARE_1; 14: SPARE_2; 15: SPARE_3; 16: SPARE_4; 17: SPARE_5; 18: SPARE_6; 19: SPARE_7; 20: UNASSIGNED; 21: fc_error]
RW_FCTRL_ALL_w3,,8,RW,,,,RSVD1,6,2,,0x0,FALSE,TRUE,FALSE,,,
RO_FCTRL_ALL_w0,,8,RO,,,,command_rx_inverted,0,1,,0x0,TRUE,FALSE,TRUE,,,Asserted if the fast command data is inverted. Only samples IDLE words.
RO_FCTRL_ALL_w0,,8,RO,,,,locked,1,1,,0x0,TRUE,FALSE,TRUE,,,Fast command data stream is locked. Instantaneous indicator.
RO_FCTRL_ALL_w0,,8,RO,,,,RSVD0,2,6,,0x0,FALSE,TRUE,TRUE,,,
RO_FCTRL_ALL_w1,,8,RO,,,,lock_count,0,8,,0x0,TRUE,FALSE,TRUE,,,Running count of number of times the phase lock is successful.
RO_FCTRL_ALL_w2,,8,RO,,,,BCR_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed BCR fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w3,,8,RO,,,,OCR_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed OCR fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w4,,8,RO,,,,L1A_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed L1A fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w5,,8,RO,,,,NZS_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed NZS fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w6,,8,RO,,,,CalPulseInt_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed CALPULSE_INT fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w7,,8,RO,,,,CalPulseExt_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed CALPULSE_EXT fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w8,,8,RO,,,,EBR_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed EBR fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w9,,8,RO,,,,ECR_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed ECR fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w10,,8,RO,,,,LINK_RESET_ROC_T_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed LINK_RESET_ROC_T fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w11,,8,RO,,,,LINK_RESET_ROC_D_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed LINK_RESET_ROC_D fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w12,,8,RO,,,,LINK_RESET_ECON_T_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed LINK_RESET_ECON_T fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w13,,8,RO,,,,LINK_RESET_ECON_D_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed LINK_RESET_ECON_D fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w14,,8,RO,,,,SPARE_0_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_0 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w15,,8,RO,,,,SPARE_1_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_1 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w16,,8,RO,,,,SPARE_2_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_2 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w17,,8,RO,,,,SPARE_3_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_3 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w18,,8,RO,,,,SPARE_4_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_4 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w19,,8,RO,,,,SPARE_5_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_5 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w20,,8,RO,,,,SPARE_6_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_6 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w21,,8,RO,,,,SPARE_7_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed SPARE_7 fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w22,,8,RO,,,,UNASSIGNED_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around counter of observed UNASSIGNED fast commands. Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w23,,8,RO,,,,fc_error_FCmd_Count,0,8,,0x0,TRUE,FALSE,TRUE,,,8-bit wrap-around count of number of times the decoded command is not valid.  Counter sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). Reset by I2C_WO_Strobes_0_Status_Clear (as well as hard or soft reset or chipsync).
RO_FCTRL_ALL_w24,,8,RO,,,,tmr_err_cnt_fast_ctrl_decoder,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_timeout_pll_action_rst,0,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the PLL timeout action counter (I2C_RO_pusm_timeout_pll_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_timeout_dll_action_rst,1,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the DLL timeout action action counter (I2C_RO_pusm_timeout_dll_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_watchdog_pll_action_rst,2,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the PLL watchdog action counter (I2C_RO_pusm_watchdog_pll_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_watchdog_dll_action_rst,3,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the DLL watchdog action action counter (I2C_RO_pusm_watchdog_dll_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_left_ready_action_rst,4,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the left ready action action counter (I2C_RO_pusm_left_ready_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_pusm_state_upset_action_rst,5,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the state upset action action counter (I2C_RO_pusm_state_upset_action_counter)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_lock_filter_loss_of_lock_count_rst,6,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the PLL loss of lock action counter (I2C_RO_lock_filter_loss_of_lock_count)
WO_CLOCKS_AND_RESETS_ALL_w0,,8,WO,,,,I2C_WO_fc_locked_action_rst,7,1,,0x0,TRUE,FALSE,FALSE,,,Reset signal for the Fast Command Locked action counter
RW_CLOCKS_AND_RESETS_ALL_w0,,8,RW,,,,I2C_RW_pusm_force_state,0,1,,0x0,TRUE,FALSE,FALSE,,,Disable state changes for the PUSM and go to 'stateForced' state (I2C_RW_pusm_force_magic has to be set first)
RW_CLOCKS_AND_RESETS_ALL_w0,,8,RW,,,,I2C_RW_pusm_force_magic,1,7,,0x0,TRUE,FALSE,FALSE,,,Magic number to enable I2C_RW_pusm_force_state signal
RW_CLOCKS_AND_RESETS_ALL_w1,,8,RW,,,,I2C_RW_pusm_force_magic,0,1,,0x0,TRUE,FALSE,FALSE,,,Magic number to enable I2C_RW_pusm_force_state signal
RW_CLOCKS_AND_RESETS_ALL_w1,,8,RW,,,,I2C_RW_pusm_state_forced,1,4,,0x0,TRUE,FALSE,FALSE,,,State to enter when I2C_RW_pusm_force_state is high [0: RESET; 1: IDLE; 2: RESET_PLL; 3: WAIT_PLL_LOCK; 4: RESET_DLLS; 5: WAIT_DLLS_RESET_DONE; 6: WAIT_DLL_LOCK; 7: RESET_LOGIC_USING_DLL; 8: READY]
RW_CLOCKS_AND_RESETS_ALL_w1,,8,RW,,,,I2C_RW_pusm_wdog_pll_disable,5,1,,0x0,TRUE,FALSE,FALSE,,,Disable PLL watchdog in the PUSM
RW_CLOCKS_AND_RESETS_ALL_w1,,8,RW,,,,I2C_RW_pusm_wdog_dll_disable,6,1,,0x0,TRUE,FALSE,FALSE,,,Disable DLL watchdog in the PUSM
RW_CLOCKS_AND_RESETS_ALL_w1,,8,RW,,,,I2C_RW_pusm_timeout_pll_lock_config,7,1,,0x0,TRUE,FALSE,FALSE,,,Configuration for timeout for PLL lock [0:1s; 1:500ms; 2:100ms; 3:50ms; 4:20ms; 5:10ms; 6:5ms; 7:2ms; 8:1ms; 9:500us; 10:200us; 11:100us; 12:50us; 13:20us; 14:10us; 15:disabled]
RW_CLOCKS_AND_RESETS_ALL_w2,,8,RW,,,,I2C_RW_pusm_timeout_pll_lock_config,0,3,,0x0,TRUE,FALSE,FALSE,,,Configuration for timeout for PLL lock [0:1s; 1:500ms; 2:100ms; 3:50ms; 4:20ms; 5:10ms; 6:5ms; 7:2ms; 8:1ms; 9:500us; 10:200us; 11:100us; 12:50us; 13:20us; 14:10us; 15:disabled]
RW_CLOCKS_AND_RESETS_ALL_w2,,8,RW,,,,I2C_RW_pusm_timeout_dll_lock_config,3,4,,0x0,TRUE,FALSE,FALSE,,,Configuration for timeout for DLL lock [0:1s; 1:500ms; 2:100ms; 3:50ms; 4:20ms; 5:10ms; 6:5ms; 7:2ms; 8:1ms; 9:500us; 10:200us; 11:100us; 12:50us; 13:20us; 14:10us; 15:disabled]
RW_CLOCKS_AND_RESETS_ALL_w2,,8,RW,,,,I2C_RW_pusm_run,7,1,,0x0,TRUE,FALSE,FALSE,,,Start PUSM (set only after the chip configuration  is stable)
RW_CLOCKS_AND_RESETS_ALL_w3,,8,RW,,,,I2C_RW_clk_tree_magic_number,0,8,,0x0,TRUE,FALSE,FALSE,,,Magic number to enable clock tree disabling. Set to 8'hA5 in order to enable clock disabling feature.
RW_CLOCKS_AND_RESETS_ALL_w4,,8,RW,,,,I2C_RW_clk_tree_a_disable,0,1,,0x0,TRUE,FALSE,FALSE,,,Disable the clock tree A (depends on I2C_RW_clk_tree_magic_number)
RW_CLOCKS_AND_RESETS_ALL_w4,,8,RW,,,,I2C_RW_clk_tree_b_disable,1,1,,0x0,TRUE,FALSE,FALSE,,,Disable the clock tree B (depends on I2C_RW_clk_tree_magic_number)
RW_CLOCKS_AND_RESETS_ALL_w4,,8,RW,,,,I2C_RW_clk_tree_c_disable,2,1,,0x0,TRUE,FALSE,FALSE,,,Disable the clock tree C (depends on I2C_RW_clk_tree_magic_number)
RW_CLOCKS_AND_RESETS_ALL_w4,,8,RW,,,,I2C_RW_pll_config_res,3,4,,0x2,TRUE,FALSE,FALSE,,,PLL's filter resistance when PLL is locking [R = 1/2 * 79.8k / CONFIG] Ohm; default: 2
RW_CLOCKS_AND_RESETS_ALL_w4,,8,RW,,,,I2C_RW_pll_config_res_when_locked,7,1,,0x0,TRUE,FALSE,FALSE,,,PLL's filter resistance when PLL is locked [R = 1/2 * 79.8k / CONFIG] Ohm; default: 2
RW_CLOCKS_AND_RESETS_ALL_w5,,8,RW,,,,I2C_RW_pll_config_res_when_locked,0,3,,0x1,TRUE,FALSE,FALSE,,,PLL's filter resistance when PLL is locked [R = 1/2 * 79.8k / CONFIG] Ohm; default: 2
RW_CLOCKS_AND_RESETS_ALL_w5,,8,RW,,,,I2C_RW_pll_config_integral,3,4,,0x9,TRUE,FALSE,FALSE,,,PLL's integral current path when in locking state [0 : 1.1 : 8] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w5,,8,RW,,,,I2C_RW_pll_config_integral_when_locked,7,1,,0x1,TRUE,FALSE,FALSE,,,PLL's integral current path when in locked state [0 : 1.1 : 8] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w6,,8,RW,,,,I2C_RW_pll_config_integral_when_locked,0,3,,0x4,TRUE,FALSE,FALSE,,,PLL's integral current path when in locked state [0 : 1.1 : 8] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w6,,8,RW,,,,I2C_RW_pll_config_proportional,3,4,,0x9,TRUE,FALSE,FALSE,,,PLL's proportional current path when in locking state [0 : 5.46 : 82] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w6,,8,RW,,,,I2C_RW_pll_config_proportional_when_locked,7,1,,0x1,TRUE,FALSE,FALSE,,,PLL's proportional current path when in locked state [0 : 5.46 : 82] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w7,,8,RW,,,,I2C_RW_pll_config_proportional_when_locked,0,3,,0x4,TRUE,FALSE,FALSE,,,PLL's proportional current path when in locked state [0 : 5.46 : 82] uA; default: 9
RW_CLOCKS_AND_RESETS_ALL_w7,,8,RW,,,,I2C_RW_vco_config_biasgen,3,4,,0x8,TRUE,FALSE,FALSE,,,Bias DAC for the charge pumps [0 : 8 : 120] uA; default: 8
RW_CLOCKS_AND_RESETS_ALL_w7,,8,RW,,,,I2C_RW_vco_config_dac,7,1,,0x0,TRUE,FALSE,FALSE,,,Current DAC for the VCO [0: 0.470 : 7.1] mA; default: 8
RW_CLOCKS_AND_RESETS_ALL_w8,,8,RW,,,,I2C_RW_vco_config_dac,0,3,,0x4,TRUE,FALSE,FALSE,,,Current DAC for the VCO [0: 0.470 : 7.1] mA; default: 8
RW_CLOCKS_AND_RESETS_ALL_w8,,8,RW,,,,I2C_RW_vco_rail_rail_mode,3,1,,0x1,TRUE,FALSE,FALSE,,,VCO rail mode; [0: voltage mode - fixed to VDDRX; 1: current mode - value selectable using CLKGVcoDAC]; default: 1
RW_CLOCKS_AND_RESETS_ALL_w8,,8,RW,,,,I2C_RW_enable_capbank_override,4,1,,0x0,TRUE,FALSE,FALSE,,,Enables the override of the capacitor bank [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w8,,8,RW,,,,I2C_RW_capbank_select,5,3,,0x7,TRUE,FALSE,FALSE,,,Selects the capacitor bank value for the VCO (only when I2C_RW_enable_capbank_override is 1)
RW_CLOCKS_AND_RESETS_ALL_w9,,8,RW,,,,I2C_RW_capbank_select,0,6,,0x3,TRUE,FALSE,FALSE,,,Selects the capacitor bank value for the VCO (only when I2C_RW_enable_capbank_override is 1)
RW_CLOCKS_AND_RESETS_ALL_w9,,8,RW,,,,I2C_RW_calibration_end_of_count_select,6,2,,0x3,TRUE,FALSE,FALSE,,,Selects the VCO calibration race goal in number of clock cycles between refClk (refClkCounter) and vco_40MHz (vcoClkCounter) (2^(I2C_RW_calibration_end_of_count_select+1)); default: 15
RW_CLOCKS_AND_RESETS_ALL_w10,,8,RW,,,,I2C_RW_calibration_end_of_count_select,0,2,,0x3,TRUE,FALSE,FALSE,,,Selects the VCO calibration race goal in number of clock cycles between refClk (refClkCounter) and vco_40MHz (vcoClkCounter) (2^(I2C_RW_calibration_end_of_count_select+1)); default: 15
RW_CLOCKS_AND_RESETS_ALL_w10,,8,RW,,,,I2C_RW_wait_pll_time,2,4,,0xf,TRUE,FALSE,FALSE,,,Wait time configuration for the PLL state machine waiting for lock (2 ^ I2C_RW_wait_pll_time);(only when I2C_RW_lock_filter_enable == 0); default: 15
RW_CLOCKS_AND_RESETS_ALL_w10,,8,RW,,,,I2C_RW_enable_control_override,6,1,,0x0,TRUE,FALSE,FALSE,,,Enables the control override of the PLL state machine; default: 0. [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w10,,8,RW,,,,I2C_RW_co_enable_pll,7,1,,0x0,TRUE,FALSE,FALSE,,,Enables the enablePLL switch in the PLL [0: disable; 1: enable] (only when I2C_RW_enable_control_override is 1); default: 0. [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_co_connect_pll,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_co_dis_data_counter_ref,1,1,,0x0,TRUE,FALSE,FALSE,,,RESERVED (not used)
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_co_dis_des_vbiasgen,2,1,,0x0,TRUE,FALSE,FALSE,,,RESERVED (not used)
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_co_override_vc,3,1,,0x0,TRUE,FALSE,FALSE,,,Forces the VCO's control voltage to be in mid range [1: enable; 0: disable] (only when I2C_RW_enable_control_override is 1); default: 0
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_lock_filter_enable,4,1,,0x1,TRUE,FALSE,FALSE,,,Enables the lock filter on the instant lock signal for the PLL; default: 1 [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w11,,8,RW,,,,I2C_RW_lock_filter_lock_threshold,5,3,,0x7,TRUE,FALSE,FALSE,,,Sets the lock threshold value of the instant lock low pass filter. The number of 40 MHz clock cycles is set to 2^I2C_RW_lock_filter_lock_threshold; default: 15
RW_CLOCKS_AND_RESETS_ALL_w12,,8,RW,,,,I2C_RW_lock_filter_lock_threshold,0,1,,0x1,TRUE,FALSE,FALSE,,,Sets the lock threshold value of the instant lock low pass filter. The number of 40 MHz clock cycles is set to 2^I2C_RW_lock_filter_lock_threshold; default: 15
RW_CLOCKS_AND_RESETS_ALL_w12,,8,RW,,,,I2C_RW_lock_filter_relock_threshold,1,4,,0xf,TRUE,FALSE,FALSE,,,Sets the relock threshold value of the instant lock low pass filter. The number of 40 MHz clock cycles is set to 2^I2C_RW_lock_filter_relock_threshold; default: 15
RW_CLOCKS_AND_RESETS_ALL_w12,,8,RW,,,,I2C_RW_lock_filter_unLock_threshold,5,3,,0x7,TRUE,FALSE,FALSE,,,Sets the unlock threshold value of the instant lock low pass filter. The number of 40 MHz clock cycles is set to 2^I2C_RW_lock_filter_unLock_threshold; default: 15
RW_CLOCKS_AND_RESETS_ALL_w13,,8,RW,,,,I2C_RW_lock_filter_unLock_threshold,0,1,,0x1,TRUE,FALSE,FALSE,,,Sets the unlock threshold value of the instant lock low pass filter. The number of 40 MHz clock cycles is set to 2^I2C_RW_lock_filter_unLock_threshold; default: 15
RW_CLOCKS_AND_RESETS_ALL_w13,,8,RW,,,,I2C_RW_lock_filter_clk_always_enable,1,1,,0x0,TRUE,FALSE,FALSE,,,Bypass clock gating and leave the clock always enabled in the lock filter; default: 0. [1: enable bypass; 0: disable bypass].
RW_CLOCKS_AND_RESETS_ALL_w13,,8,RW,,,,I2C_RW_test_output_0_select,2,6,,0x0,TRUE,FALSE,FALSE,,,Control for the test output multiplexer (channel 0) [0: Always low; 1: Always high; 2: ClkA; 3: ClkB; 4: ClkC; 5: clk40M_etx; 6: clk80M_etx; 7: clk160M_etx; 8: clk320M_etx; 9: clk640M_etx; 10: clk1G28_etx; 11: clk40M_erx; 12: clk80M_erx; 13: clk160M_erx; 14: clk320M_erx; 15: clk640M_erx; 16: clk1G28_erx; 17: end_counter_ref_clk; 18: capbank_search_active; 19: end_counter_vco; 20: pll_inst_lock; 21: pll_lockedV; 22: data_fcV; 23: clk_320M_fcV; 24: fc_locked_asyncV; 25: fc_error_asyncV; 26: fc_UNASSIGNED_asyncV; 27: fc_SPARE_7_asyncV; 28: fc_SPARE_6_asyncV; 29: fc_SPARE_5_asyncV; 30: fc_SPARE_4_asyncV; 31: fc_SPARE_3_asyncV; 32: fc_SPARE_2_asyncV; 33: fc_SPARE_1_asyncV; 34: fc_SPARE_0_asyncV; 35: fc_LINK_RESET_ECON_D_asyncV; 36: fc_LINK_RESET_ECON_T_asyncV; 37: fc_LINK_RESET_ROC_D_asyncV; 38: fc_LINK_RESET_ROC_T_asyncV; 39: fc_ECR_asyncV; 40: fc_EBR_asyncV; 41: fc_CalPulseExt_asyncV; 42: fc_CalPulseInt_asyncV; 43: fc_NZS_asyncV; 44: fc_L1A_asyncV; 45: fc_OCR_asyncV; 46: fc_BCR_asyncV; 47: fc_Chip_Sync_asyncV; 48: fc_UNASSIGNEDV; 49: fc_SPARE_7V; 50: fc_SPARE_6V; 51: fc_SPARE_5V; 52: fc_SPARE_4V; 53: fc_SPARE_3V; 54: fc_SPARE_2V; 55: fc_SPARE_1V; 56: fc_SPARE_0V; 57: fc_LINK_RESET_ECON_DV; 58: fc_LINK_RESET_ECON_TV; 59: fc_LINK_RESET_ROC_DV; 60: fc_LINK_RESET_ROC_TV; 61: fc_ECRV; 62: fc_EBRV; 63: fc_CalPulseExtV; 64: fc_CalPulseIntV; 65: fc_NZSV; 66: fc_L1AV; 67: fc_OCRV; 68: fc_BCRV; 69: fc_Chip_SyncV; 70: dll_late[0]; 71: dll_late[1]; 72: dll_late[2]; 73: dll_late[3]; 74: dll_late[4]; 75: dll_late[5]; 76: dll_late[6]; 77: dll_late[7]; 78: dll_late[8]; 79: dll_late[9]; 80: dll_late[10]; 81: dll_late[11]]
RW_CLOCKS_AND_RESETS_ALL_w14,,8,RW,,,,I2C_RW_test_output_0_select,0,2,,0x0,TRUE,FALSE,FALSE,,,Control for the test output multiplexer (channel 0) [0: Always low; 1: Always high; 2: ClkA; 3: ClkB; 4: ClkC; 5: clk40M_etx; 6: clk80M_etx; 7: clk160M_etx; 8: clk320M_etx; 9: clk640M_etx; 10: clk1G28_etx; 11: clk40M_erx; 12: clk80M_erx; 13: clk160M_erx; 14: clk320M_erx; 15: clk640M_erx; 16: clk1G28_erx; 17: end_counter_ref_clk; 18: capbank_search_active; 19: end_counter_vco; 20: pll_inst_lock; 21: pll_lockedV; 22: data_fcV; 23: clk_320M_fcV; 24: fc_locked_asyncV; 25: fc_error_asyncV; 26: fc_UNASSIGNED_asyncV; 27: fc_SPARE_7_asyncV; 28: fc_SPARE_6_asyncV; 29: fc_SPARE_5_asyncV; 30: fc_SPARE_4_asyncV; 31: fc_SPARE_3_asyncV; 32: fc_SPARE_2_asyncV; 33: fc_SPARE_1_asyncV; 34: fc_SPARE_0_asyncV; 35: fc_LINK_RESET_ECON_D_asyncV; 36: fc_LINK_RESET_ECON_T_asyncV; 37: fc_LINK_RESET_ROC_D_asyncV; 38: fc_LINK_RESET_ROC_T_asyncV; 39: fc_ECR_asyncV; 40: fc_EBR_asyncV; 41: fc_CalPulseExt_asyncV; 42: fc_CalPulseInt_asyncV; 43: fc_NZS_asyncV; 44: fc_L1A_asyncV; 45: fc_OCR_asyncV; 46: fc_BCR_asyncV; 47: fc_Chip_Sync_asyncV; 48: fc_UNASSIGNEDV; 49: fc_SPARE_7V; 50: fc_SPARE_6V; 51: fc_SPARE_5V; 52: fc_SPARE_4V; 53: fc_SPARE_3V; 54: fc_SPARE_2V; 55: fc_SPARE_1V; 56: fc_SPARE_0V; 57: fc_LINK_RESET_ECON_DV; 58: fc_LINK_RESET_ECON_TV; 59: fc_LINK_RESET_ROC_DV; 60: fc_LINK_RESET_ROC_TV; 61: fc_ECRV; 62: fc_EBRV; 63: fc_CalPulseExtV; 64: fc_CalPulseIntV; 65: fc_NZSV; 66: fc_L1AV; 67: fc_OCRV; 68: fc_BCRV; 69: fc_Chip_SyncV; 70: dll_late[0]; 71: dll_late[1]; 72: dll_late[2]; 73: dll_late[3]; 74: dll_late[4]; 75: dll_late[5]; 76: dll_late[6]; 77: dll_late[7]; 78: dll_late[8]; 79: dll_late[9]; 80: dll_late[10]; 81: dll_late[11]]
RW_CLOCKS_AND_RESETS_ALL_w14,,8,RW,,,,I2C_RW_test_output_1_select,2,6,,0x0,TRUE,FALSE,FALSE,,,Control for the test output multiplexer (channel 1) [0: Always low; 1: Always high; 2: ClkA; 3: ClkB; 4: ClkC; 5: clk40M_etx; 6: clk80M_etx; 7: clk160M_etx; 8: clk320M_etx; 9: clk640M_etx; 10: clk1G28_etx; 11: clk40M_erx; 12: clk80M_erx; 13: clk160M_erx; 14: clk320M_erx; 15: clk640M_erx; 16: clk1G28_erx; 17: end_counter_ref_clk; 18: capbank_search_active; 19: end_counter_vco; 20: pll_inst_lock; 21: pll_lockedV; 22: data_fcV; 23: clk_320M_fcV; 24: fc_locked_asyncV; 25: fc_error_asyncV; 26: fc_UNASSIGNED_asyncV; 27: fc_SPARE_7_asyncV; 28: fc_SPARE_6_asyncV; 29: fc_SPARE_5_asyncV; 30: fc_SPARE_4_asyncV; 31: fc_SPARE_3_asyncV; 32: fc_SPARE_2_asyncV; 33: fc_SPARE_1_asyncV; 34: fc_SPARE_0_asyncV; 35: fc_LINK_RESET_ECON_D_asyncV; 36: fc_LINK_RESET_ECON_T_asyncV; 37: fc_LINK_RESET_ROC_D_asyncV; 38: fc_LINK_RESET_ROC_T_asyncV; 39: fc_ECR_asyncV; 40: fc_EBR_asyncV; 41: fc_CalPulseExt_asyncV; 42: fc_CalPulseInt_asyncV; 43: fc_NZS_asyncV; 44: fc_L1A_asyncV; 45: fc_OCR_asyncV; 46: fc_BCR_asyncV; 47: fc_Chip_Sync_asyncV; 48: fc_UNASSIGNEDV; 49: fc_SPARE_7V; 50: fc_SPARE_6V; 51: fc_SPARE_5V; 52: fc_SPARE_4V; 53: fc_SPARE_3V; 54: fc_SPARE_2V; 55: fc_SPARE_1V; 56: fc_SPARE_0V; 57: fc_LINK_RESET_ECON_DV; 58: fc_LINK_RESET_ECON_TV; 59: fc_LINK_RESET_ROC_DV; 60: fc_LINK_RESET_ROC_TV; 61: fc_ECRV; 62: fc_EBRV; 63: fc_CalPulseExtV; 64: fc_CalPulseIntV; 65: fc_NZSV; 66: fc_L1AV; 67: fc_OCRV; 68: fc_BCRV; 69: fc_Chip_SyncV; 70: dll_late[0]; 71: dll_late[1]; 72: dll_late[2]; 73: dll_late[3]; 74: dll_late[4]; 75: dll_late[5]; 76: dll_late[6]; 77: dll_late[7]; 78: dll_late[8]; 79: dll_late[9]; 80: dll_late[10]; 81: dll_late[11]]
RW_CLOCKS_AND_RESETS_ALL_w15,,8,RW,,,,I2C_RW_test_output_1_select,0,2,,0x0,TRUE,FALSE,FALSE,,,Control for the test output multiplexer (channel 1) [0: Always low; 1: Always high; 2: ClkA; 3: ClkB; 4: ClkC; 5: clk40M_etx; 6: clk80M_etx; 7: clk160M_etx; 8: clk320M_etx; 9: clk640M_etx; 10: clk1G28_etx; 11: clk40M_erx; 12: clk80M_erx; 13: clk160M_erx; 14: clk320M_erx; 15: clk640M_erx; 16: clk1G28_erx; 17: end_counter_ref_clk; 18: capbank_search_active; 19: end_counter_vco; 20: pll_inst_lock; 21: pll_lockedV; 22: data_fcV; 23: clk_320M_fcV; 24: fc_locked_asyncV; 25: fc_error_asyncV; 26: fc_UNASSIGNED_asyncV; 27: fc_SPARE_7_asyncV; 28: fc_SPARE_6_asyncV; 29: fc_SPARE_5_asyncV; 30: fc_SPARE_4_asyncV; 31: fc_SPARE_3_asyncV; 32: fc_SPARE_2_asyncV; 33: fc_SPARE_1_asyncV; 34: fc_SPARE_0_asyncV; 35: fc_LINK_RESET_ECON_D_asyncV; 36: fc_LINK_RESET_ECON_T_asyncV; 37: fc_LINK_RESET_ROC_D_asyncV; 38: fc_LINK_RESET_ROC_T_asyncV; 39: fc_ECR_asyncV; 40: fc_EBR_asyncV; 41: fc_CalPulseExt_asyncV; 42: fc_CalPulseInt_asyncV; 43: fc_NZS_asyncV; 44: fc_L1A_asyncV; 45: fc_OCR_asyncV; 46: fc_BCR_asyncV; 47: fc_Chip_Sync_asyncV; 48: fc_UNASSIGNEDV; 49: fc_SPARE_7V; 50: fc_SPARE_6V; 51: fc_SPARE_5V; 52: fc_SPARE_4V; 53: fc_SPARE_3V; 54: fc_SPARE_2V; 55: fc_SPARE_1V; 56: fc_SPARE_0V; 57: fc_LINK_RESET_ECON_DV; 58: fc_LINK_RESET_ECON_TV; 59: fc_LINK_RESET_ROC_DV; 60: fc_LINK_RESET_ROC_TV; 61: fc_ECRV; 62: fc_EBRV; 63: fc_CalPulseExtV; 64: fc_CalPulseIntV; 65: fc_NZSV; 66: fc_L1AV; 67: fc_OCRV; 68: fc_BCRV; 69: fc_Chip_SyncV; 70: dll_late[0]; 71: dll_late[1]; 72: dll_late[2]; 73: dll_late[3]; 74: dll_late[4]; 75: dll_late[5]; 76: dll_late[6]; 77: dll_late[7]; 78: dll_late[8]; 79: dll_late[9]; 80: dll_late[10]; 81: dll_late[11]]
RW_CLOCKS_AND_RESETS_ALL_w15,,8,RW,,,,I2C_RW_test_output_enable_0,2,1,,0x1,TRUE,FALSE,FALSE,,,Enable test output 0 [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w15,,8,RW,,,,I2C_RW_test_output_invert_data_0,3,1,,0x0,TRUE,FALSE,FALSE,,,Invert test output 0 [1: invert; 0: not invert].
RW_CLOCKS_AND_RESETS_ALL_w15,,8,RW,,,,I2C_RW_test_output_preemp_mode_0,4,2,,0x0,TRUE,FALSE,FALSE,,,Sets the pre-emphasis mode for test output 0 [0: disabled; 1: reserved; 2: self timed; 3:reserved]
RW_CLOCKS_AND_RESETS_ALL_w15,,8,RW,,,,I2C_RW_test_output_drive_strength_0,6,2,,0x3,TRUE,FALSE,FALSE,,,Sets the driving strength for test output 0 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w16,,8,RW,,,,I2C_RW_test_output_drive_strength_0,0,1,,0x0,TRUE,FALSE,FALSE,,,Sets the driving strength for test output 0 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w16,,8,RW,,,,I2C_RW_test_output_preemp_strength_0,1,3,,0x3,TRUE,FALSE,FALSE,,,Sets the pre-emphasis strength for test output 0 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w16,,8,RW,,,,I2C_RW_test_output_preemp_width_0,4,3,,0x0,TRUE,FALSE,FALSE,,,Sets the width of pre-emphasis pulse for test output 0 in self timed mode [0: 120ps; 1: 240ps; ...; 7: 960 ps]
RW_CLOCKS_AND_RESETS_ALL_w16,,8,RW,,,,I2C_RW_test_output_lowSupplyR_0,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_CLOCKS_AND_RESETS_ALL_w17,,8,RW,,,,I2C_RW_test_output_enable_1,0,1,,0x1,TRUE,FALSE,FALSE,,,Enable test output 1 [1: enable; 0: disable].
RW_CLOCKS_AND_RESETS_ALL_w17,,8,RW,,,,I2C_RW_test_output_invert_data_1,1,1,,0x0,TRUE,FALSE,FALSE,,,Invert test output 1 [1: invert; 0: not invert].
RW_CLOCKS_AND_RESETS_ALL_w17,,8,RW,,,,I2C_RW_test_output_preemp_mode_1,2,2,,0x0,TRUE,FALSE,FALSE,,,Sets the pre-emphasis mode for test output 1 [0: disabled; 2'd2: self timed]
RW_CLOCKS_AND_RESETS_ALL_w17,,8,RW,,,,I2C_RW_test_output_drive_strength_1,4,3,,0x3,TRUE,FALSE,FALSE,,,Sets the driving strength for test output 1 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w17,,8,RW,,,,I2C_RW_test_output_preemp_strength_1,7,1,,0x1,TRUE,FALSE,FALSE,,,Sets the pre-emphasis strength for test output 1 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w18,,8,RW,,,,I2C_RW_test_output_preemp_strength_1,0,2,,0x1,TRUE,FALSE,FALSE,,,Sets the pre-emphasis strength for test output 1 [0: 0mA; 1: 1.0mA; 2: 1.5mA; ...; 7: 4mA]
RW_CLOCKS_AND_RESETS_ALL_w18,,8,RW,,,,I2C_RW_test_output_preemp_width_1,2,3,,0x0,TRUE,FALSE,FALSE,,,Sets the width of pre-emphasis pulse for test output 0 in self timed mode [0: 120ps; 1: 240ps; ...; 7: 960 ps]
RW_CLOCKS_AND_RESETS_ALL_w18,,8,RW,,,,I2C_RW_test_output_lowSupplyR_1,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_CLOCKS_AND_RESETS_ALL_w18,,8,RW,,,,I2C_RW_ref_clk_sel_testclkin,6,1,,0x0,TRUE,FALSE,FALSE,,,Reference clock selection; 0: from fast command; 1: from test_clk_in
RW_CLOCKS_AND_RESETS_ALL_w18,,8,RW,,,,I2C_RW_clk_tree_sram_disable,7,1,,0x0,TRUE,FALSE,FALSE,,,Disable non triplicated clock for SRAMs
RW_CLOCKS_AND_RESETS_ALL_w19,,8,RW,,,,I2C_RW_clk_tree_erx_disable,0,1,,0x0,TRUE,FALSE,FALSE,,,Disable clock tree for high speed deserializers (ePortRxGroup)
RW_CLOCKS_AND_RESETS_ALL_w19,,8,RW,,,,I2C_RW_clk_tree_etx_disable,1,1,,0x0,TRUE,FALSE,FALSE,,,Disable clock tree for high speed serializers
RW_CLOCKS_AND_RESETS_ALL_w19,,8,RW,,,,RSVD0,2,6,,0x0,FALSE,TRUE,FALSE,,,
RO_CLOCKS_AND_RESETS_ALL_w0,,8,RO,,,,I2C_RO_pusm_timeout_pll_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,PLL timeout action counter
RO_CLOCKS_AND_RESETS_ALL_w1,,8,RO,,,,I2C_RO_pusm_timeout_dll_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,DLL timeout action counter
RO_CLOCKS_AND_RESETS_ALL_w2,,8,RO,,,,I2C_RO_pusm_watchdog_pll_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,PLL watchdog action action counter
RO_CLOCKS_AND_RESETS_ALL_w3,,8,RO,,,,I2C_RO_pusm_watchdog_dll_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,DLL watchdog action action counter
RO_CLOCKS_AND_RESETS_ALL_w4,,8,RO,,,,I2C_RO_pusm_left_ready_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,Left Ready State action action counter
RO_CLOCKS_AND_RESETS_ALL_w5,,8,RO,,,,I2C_RO_pusm_state_upset_action_counter,0,8,,0x0,TRUE,FALSE,TRUE,,,State Upset action action counter
RO_CLOCKS_AND_RESETS_ALL_w6,,8,RO,,,,I2C_RO_pusm_state,0,4,,0x0,TRUE,FALSE,TRUE,,,Power Up State Machine State [0: RESET; 1: IDLE; 2: RESET_PLL; 3: WAIT_PLL_LOCK; 4: RESET_DLLS; 5: WAIT_DLLS_RESET_DONE; 6: WAIT_DLL_LOCK; 7: RESET_LOGIC_USING_DLL; 8: READY]
RO_CLOCKS_AND_RESETS_ALL_w6,,8,RO,,,,I2C_RO_lock_filter_state,4,2,,0x0,TRUE,FALSE,TRUE,,,Lock filter state machine [0: UnlockedState; 1: ConfirmLockState; 2: LockedState; 3: ConfirmUnlockState]
RO_CLOCKS_AND_RESETS_ALL_w6,,8,RO,,,,I2C_RO_lock_filter_locked,6,1,,0x0,TRUE,FALSE,TRUE,,,Locked signal from the lock filter
RO_CLOCKS_AND_RESETS_ALL_w6,,8,RO,,,,I2C_RO_lock_filter_loss_of_lock_count,7,1,,0x0,TRUE,FALSE,TRUE,,,PLL loss of lock action counter
RO_CLOCKS_AND_RESETS_ALL_w7,,8,RO,,,,I2C_RO_lock_filter_loss_of_lock_count,0,7,,0x0,TRUE,FALSE,TRUE,,,PLL loss of lock action counter
RO_CLOCKS_AND_RESETS_ALL_w7,,8,RO,,,,I2C_RO_sm_state,7,1,,0x0,TRUE,FALSE,TRUE,,,PLL initialization state machine [0: ResetState; 1: Init; 2: CapSearchStart; 3: CapSearchClearCounters0; 4: CapSearchClearCounters1; 5: CapSearchEnableCounter; 6: CapSearchWaitFreqDecision; 7: CapSearchVCOFaster; 8: CapSearchRefClkFaster; 9: PLLInit; 10: CDRInit; 11: PLLEnd; 12: CDREnd]
RO_CLOCKS_AND_RESETS_ALL_w8,,8,RO,,,,I2C_RO_sm_state,0,3,,0x0,TRUE,FALSE,TRUE,,,PLL initialization state machine [0: ResetState; 1: Init; 2: CapSearchStart; 3: CapSearchClearCounters0; 4: CapSearchClearCounters1; 5: CapSearchEnableCounter; 6: CapSearchWaitFreqDecision; 7: CapSearchVCOFaster; 8: CapSearchRefClkFaster; 9: PLLInit; 10: CDRInit; 11: PLLEnd; 12: CDREnd]
RO_CLOCKS_AND_RESETS_ALL_w8,,8,RO,,,,I2C_RO_sm_locked,3,1,,0x0,TRUE,FALSE,TRUE,,,PLL state machine locked
RO_CLOCKS_AND_RESETS_ALL_w8,,8,RO,,,,I2C_RO_vco_capbank,4,4,,0x0,TRUE,FALSE,TRUE,,,Currently selected capacitor bank
RO_CLOCKS_AND_RESETS_ALL_w9,,8,RO,,,,I2C_RO_vco_capbank,0,5,,0x0,TRUE,FALSE,TRUE,,,Currently selected capacitor bank
RO_CLOCKS_AND_RESETS_ALL_w9,,8,RO,,,,RSVD0,5,3,,0x0,FALSE,TRUE,TRUE,,,
RO_CLOCKS_AND_RESETS_ALL_w10,,8,RO,,,,tmr_err_cnt_clocks_and_resets,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_ERX_ALL_w0,,8,RW,,,,erx_ch_00_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w0,,8,RW,,,,erx_ch_00_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w0,,8,RW,,,,erx_ch_00_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w0,,8,RW,,,,erx_ch_00_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w0,,8,RW,,,,erx_ch_00_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w0,,8,RW,,,,RSVD0,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,erx_ch_01_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,erx_ch_01_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,erx_ch_01_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,erx_ch_01_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,erx_ch_01_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w1,,8,RW,,,,RSVD1,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,erx_ch_02_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,erx_ch_02_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,erx_ch_02_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,erx_ch_02_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,erx_ch_02_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w2,,8,RW,,,,RSVD2,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,erx_ch_03_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,erx_ch_03_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,erx_ch_03_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,erx_ch_03_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,erx_ch_03_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w3,,8,RW,,,,RSVD3,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,erx_ch_04_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,erx_ch_04_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,erx_ch_04_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,erx_ch_04_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,erx_ch_04_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w4,,8,RW,,,,RSVD4,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,erx_ch_05_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,erx_ch_05_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,erx_ch_05_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,erx_ch_05_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,erx_ch_05_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w5,,8,RW,,,,RSVD5,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,erx_ch_06_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,erx_ch_06_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,erx_ch_06_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,erx_ch_06_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,erx_ch_06_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w6,,8,RW,,,,RSVD6,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,erx_ch_07_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,erx_ch_07_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,erx_ch_07_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,erx_ch_07_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,erx_ch_07_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w7,,8,RW,,,,RSVD7,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,erx_ch_08_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,erx_ch_08_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,erx_ch_08_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,erx_ch_08_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,erx_ch_08_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w8,,8,RW,,,,RSVD8,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,erx_ch_09_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,erx_ch_09_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,erx_ch_09_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,erx_ch_09_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,erx_ch_09_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w9,,8,RW,,,,RSVD9,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,erx_ch_10_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,erx_ch_10_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,erx_ch_10_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,erx_ch_10_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,erx_ch_10_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w10,,8,RW,,,,RSVD10,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,erx_ch_11_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,erx_ch_11_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,erx_ch_11_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,erx_ch_11_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,erx_ch_11_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ERX_ALL_w11,,8,RW,,,,RSVD11,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w12,,8,RW,,,,erx_mux_00_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,TESTCLKIN pad enable [1: enable; 0: disable].
RW_ERX_ALL_w12,,8,RW,,,,erx_mux_00_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,TESTCLKIN pad invert data [0: not invert; 1: invert].
RW_ERX_ALL_w12,,8,RW,,,,erx_mux_00_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,TESTCLKIN pad enable 100 Ohm termination [1: enable; 0: disable].
RW_ERX_ALL_w12,,8,RW,,,,erx_mux_00_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,TESTCLKIN equalization control.
RW_ERX_ALL_w12,,8,RW,,,,erx_mux_00_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,TESTCLKIN enables the common mode [1: enable; 0: disable].
RW_ERX_ALL_w12,,8,RW,,,,RSVD12,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w13,,8,RW,,,,erx_mux_01_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,RESERVED (not used)
RW_ERX_ALL_w13,,8,RW,,,,erx_mux_01_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,RESERVED (do not use). Inverts the fast command clock at the pad. Use RW_FCTRL_ALL_w0.EdgeSel_T1 for the same functionality.
RW_ERX_ALL_w13,,8,RW,,,,erx_mux_01_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,Fast command clock enable termination [1: enable; 0: disable].
RW_ERX_ALL_w13,,8,RW,,,,erx_mux_01_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,Fast command clock equalization control.
RW_ERX_ALL_w13,,8,RW,,,,erx_mux_01_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,Fast command clock enables the common mode [1: enable; 0: disable].
RW_ERX_ALL_w13,,8,RW,,,,RSVD13,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ERX_ALL_w14,,8,RW,,,,erx_mux_02_enable,0,1,,0x1,TRUE,FALSE,FALSE,,,RESERVED (not used)
RW_ERX_ALL_w14,,8,RW,,,,erx_mux_02_invert_data,1,1,,0x0,TRUE,FALSE,FALSE,,,RESERVED (do not use). Inverts the fast command data at the pad. Use RW_FCTRL_ALL_w0.invert_command_rx for the same functionality.
RW_ERX_ALL_w14,,8,RW,,,,erx_mux_02_enable_termination,2,1,,0x1,TRUE,FALSE,FALSE,,,Fast command data enable termination [1: enable; 0: disable].
RW_ERX_ALL_w14,,8,RW,,,,erx_mux_02_equalizer,3,2,,0x0,TRUE,FALSE,FALSE,,,Fast command data equalization control.
RW_ERX_ALL_w14,,8,RW,,,,erx_mux_02_set_common_mode,5,1,,0x0,TRUE,FALSE,FALSE,,,Fast command data enables the common mode [1: enable; 0: disable].
RW_ERX_ALL_w14,,8,RW,,,,RSVD14,6,2,,0x0,FALSE,TRUE,FALSE,,,
RO_ERX_ALL_w0,,8,RO,,,,tmr_err_cnt_erx,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_ETX_ALL_w0,,8,RW,,,,etx_ch_00_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w0,,8,RW,,,,etx_ch_00_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w0,,8,RW,,,,etx_ch_00_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w0,,8,RW,,,,etx_ch_00_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w1,,8,RW,,,,etx_ch_00_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w1,,8,RW,,,,etx_ch_00_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w1,,8,RW,,,,etx_ch_00_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w1,,8,RW,,,,RSVD0,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w2,,8,RW,,,,etx_ch_01_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w2,,8,RW,,,,etx_ch_01_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w2,,8,RW,,,,etx_ch_01_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w2,,8,RW,,,,etx_ch_01_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w3,,8,RW,,,,etx_ch_01_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w3,,8,RW,,,,etx_ch_01_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w3,,8,RW,,,,etx_ch_01_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w3,,8,RW,,,,RSVD1,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w4,,8,RW,,,,etx_ch_02_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w4,,8,RW,,,,etx_ch_02_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w4,,8,RW,,,,etx_ch_02_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w4,,8,RW,,,,etx_ch_02_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w5,,8,RW,,,,etx_ch_02_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w5,,8,RW,,,,etx_ch_02_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w5,,8,RW,,,,etx_ch_02_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w5,,8,RW,,,,RSVD2,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w6,,8,RW,,,,etx_ch_03_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w6,,8,RW,,,,etx_ch_03_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w6,,8,RW,,,,etx_ch_03_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w6,,8,RW,,,,etx_ch_03_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w7,,8,RW,,,,etx_ch_03_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w7,,8,RW,,,,etx_ch_03_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w7,,8,RW,,,,etx_ch_03_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w7,,8,RW,,,,RSVD3,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w8,,8,RW,,,,etx_ch_04_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w8,,8,RW,,,,etx_ch_04_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w8,,8,RW,,,,etx_ch_04_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w8,,8,RW,,,,etx_ch_04_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w9,,8,RW,,,,etx_ch_04_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w9,,8,RW,,,,etx_ch_04_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w9,,8,RW,,,,etx_ch_04_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w9,,8,RW,,,,RSVD4,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w10,,8,RW,,,,etx_ch_05_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w10,,8,RW,,,,etx_ch_05_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w10,,8,RW,,,,etx_ch_05_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w10,,8,RW,,,,etx_ch_05_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w11,,8,RW,,,,etx_ch_05_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w11,,8,RW,,,,etx_ch_05_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w11,,8,RW,,,,etx_ch_05_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w11,,8,RW,,,,RSVD5,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w12,,8,RW,,,,etx_ch_06_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w12,,8,RW,,,,etx_ch_06_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w12,,8,RW,,,,etx_ch_06_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w12,,8,RW,,,,etx_ch_06_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w13,,8,RW,,,,etx_ch_06_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w13,,8,RW,,,,etx_ch_06_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w13,,8,RW,,,,etx_ch_06_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w13,,8,RW,,,,RSVD6,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w14,,8,RW,,,,etx_ch_07_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w14,,8,RW,,,,etx_ch_07_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w14,,8,RW,,,,etx_ch_07_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w14,,8,RW,,,,etx_ch_07_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w15,,8,RW,,,,etx_ch_07_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w15,,8,RW,,,,etx_ch_07_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w15,,8,RW,,,,etx_ch_07_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w15,,8,RW,,,,RSVD7,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w16,,8,RW,,,,etx_ch_08_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w16,,8,RW,,,,etx_ch_08_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w16,,8,RW,,,,etx_ch_08_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w16,,8,RW,,,,etx_ch_08_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w17,,8,RW,,,,etx_ch_08_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w17,,8,RW,,,,etx_ch_08_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w17,,8,RW,,,,etx_ch_08_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w17,,8,RW,,,,RSVD8,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w18,,8,RW,,,,etx_ch_09_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w18,,8,RW,,,,etx_ch_09_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w18,,8,RW,,,,etx_ch_09_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w18,,8,RW,,,,etx_ch_09_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w19,,8,RW,,,,etx_ch_09_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w19,,8,RW,,,,etx_ch_09_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w19,,8,RW,,,,etx_ch_09_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w19,,8,RW,,,,RSVD9,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w20,,8,RW,,,,etx_ch_10_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w20,,8,RW,,,,etx_ch_10_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w20,,8,RW,,,,etx_ch_10_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w20,,8,RW,,,,etx_ch_10_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w21,,8,RW,,,,etx_ch_10_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w21,,8,RW,,,,etx_ch_10_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w21,,8,RW,,,,etx_ch_10_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w21,,8,RW,,,,RSVD10,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w22,,8,RW,,,,etx_ch_11_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w22,,8,RW,,,,etx_ch_11_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w22,,8,RW,,,,etx_ch_11_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w22,,8,RW,,,,etx_ch_11_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w23,,8,RW,,,,etx_ch_11_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w23,,8,RW,,,,etx_ch_11_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w23,,8,RW,,,,etx_ch_11_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w23,,8,RW,,,,RSVD11,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ETX_ALL_w24,,8,RW,,,,etx_ch_12_invert_data,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w24,,8,RW,,,,etx_ch_12_drive_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w24,,8,RW,,,,etx_ch_12_pre_emphasis_mode,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w24,,8,RW,,,,etx_ch_12_pre_emphasis_width,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w25,,8,RW,,,,etx_ch_12_pre_emphasis_width,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w25,,8,RW,,,,etx_ch_12_pre_emphasis_strength,1,3,,0x3,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w25,,8,RW,,,,etx_ch_12_lowSupplyR,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ETX_ALL_w25,,8,RW,,,,RSVD12,5,3,,0x0,FALSE,TRUE,FALSE,,,
RO_ETX_ALL_w0,,8,RO,,,,tmr_err_cnt_etx,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
WO_ROC_DAQ_CTRL_ALL_w0,,8,WO,,,,I2C_WO_Strobes_0_Status_Clear,0,1,,0x0,TRUE,FALSE,FALSE,,,
WO_ROC_DAQ_CTRL_ALL_w0,,8,WO,,,,I2C_WO_Strobes_1_Start_PingPong_BIST,1,1,,0x0,TRUE,FALSE,FALSE,,,
WO_ROC_DAQ_CTRL_ALL_w0,,8,WO,,,,I2C_WO_Strobes_2_Status_Capture,2,1,,0x0,TRUE,FALSE,FALSE,,,
WO_ROC_DAQ_CTRL_ALL_w0,,8,WO,,,,I2C_WO_Strobes_3_Start_OB_BIST,3,1,,0x0,TRUE,FALSE,FALSE,,,
WO_ROC_DAQ_CTRL_ALL_w0,,8,WO,,,,RSVD0,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ROC_DAQ_CTRL_ALL_w0,,8,RW,,,,I2C_RW_badWord_Threshold,0,8,,0x14,TRUE,FALSE,FALSE,,,The number of non-Idle and non-Header words that will be tolerated during a single home state. Above this number and a missed packet error fires.
RW_ROC_DAQ_CTRL_ALL_w1,,8,RW,,,,I2C_RW_BCR_Bucket_Default,0,8,,0xba,TRUE,FALSE,FALSE,,,The Bunch Counter resets to a number upon receipt of a BCR Fast Command.  This is the number the Bunch Counter resets to.
RW_ROC_DAQ_CTRL_ALL_w2,,8,RW,,,,I2C_RW_BCR_Bucket_Default,0,4,,0xd,TRUE,FALSE,FALSE,,,The Bunch Counter resets to a number upon receipt of a BCR Fast Command.  This is the number the Bunch Counter resets to.
RW_ROC_DAQ_CTRL_ALL_w2,,8,RW,,,,I2C_RW_SimpleMode,4,1,,0x1,TRUE,FALSE,FALSE,,,1-bit active high 1=Simple Mode 0=Predictive Mode.
RW_ROC_DAQ_CTRL_ALL_w2,,8,RW,,,,I2C_RW_Pass_Thru_Mode,5,1,,0x0,TRUE,FALSE,FALSE,,,1-bit active high 1=Pass-Thru Mode 0=Standard Mode.
RW_ROC_DAQ_CTRL_ALL_w2,,8,RW,,,,RSVD0,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ROC_DAQ_CTRL_ALL_w3,,8,RW,,,,I2C_RW_L1A_TO_HGCROC_OUT,0,5,,0x7,TRUE,FALSE,FALSE,,,Expected delay (in clock ticks) from the reception of an isolated L1A to the output of its Header by the HGCROC.
RW_ROC_DAQ_CTRL_ALL_w3,,8,RW,,,,I2C_RW_ECON_BUFFER_DELAY,5,3,,0x7,TRUE,FALSE,FALSE,,,Expected delay (in clock ticks) from the capture of an HGCROC Header to its output (to the ECON Core) by the Aligner.
RW_ROC_DAQ_CTRL_ALL_w4,,8,RW,,,,I2C_RW_ECON_BUFFER_DELAY,0,2,,0x0,TRUE,FALSE,FALSE,,,Expected delay (in clock ticks) from the capture of an HGCROC Header to its output (to the ECON Core) by the Aligner.
RW_ROC_DAQ_CTRL_ALL_w4,,8,RW,,,,I2C_RW_L1A_OFFSET,2,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ROC_DAQ_CTRL_ALL_w4,,8,RW,,,,RSVD1,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ROC_DAQ_CTRL_ALL_w5,,8,RW,,,,I2C_RW_MatchThreshold,0,4,,0x0,TRUE,FALSE,FALSE,,,Sets the number of eRXs that must agree on a Header Word for that word to be considered a Header Word. Should be < 12.
RW_ROC_DAQ_CTRL_ALL_w5,,8,RW,,,,I2C_RW_Active_eRXs,4,4,,0xf,TRUE,FALSE,FALSE,,,Each bit indicates if the corresponding eLink is active (1) or inactive (0).  This could be made the same as I2C_RW_active_eLinks used in eLink Processor Header and elsewhere.
RW_ROC_DAQ_CTRL_ALL_w6,,8,RW,,,,I2C_RW_Active_eRXs,0,8,,0xff,TRUE,FALSE,FALSE,,,Each bit indicates if the corresponding eLink is active (1) or inactive (0).  This could be made the same as I2C_RW_active_eLinks used in eLink Processor Header and elsewhere.
RW_ROC_DAQ_CTRL_ALL_w7,,8,RW,,,,I2C_RW_SyncBody,0,8,,0xaa,TRUE,FALSE,FALSE,,,The value of the body (final 28 bits) of any sync word regardless of its bucket number.
RW_ROC_DAQ_CTRL_ALL_w8,,8,RW,,,,I2C_RW_SyncBody,0,8,,0xaa,TRUE,FALSE,FALSE,,,The value of the body (final 28 bits) of any sync word regardless of its bucket number.
RW_ROC_DAQ_CTRL_ALL_w9,,8,RW,,,,I2C_RW_SyncBody,0,8,,0xaa,TRUE,FALSE,FALSE,,,The value of the body (final 28 bits) of any sync word regardless of its bucket number.
RW_ROC_DAQ_CTRL_ALL_w10,,8,RW,,,,I2C_RW_SyncBody,0,4,,0xa,TRUE,FALSE,FALSE,,,The value of the body (final 28 bits) of any sync word regardless of its bucket number.
RW_ROC_DAQ_CTRL_ALL_w10,,8,RW,,,,I2C_RW_FirstSyncHeader,4,4,,0x9,TRUE,FALSE,FALSE,,,The value of the first 4 bits of a sync word if the sync word happens to fall on the first bucket of an orbit.
RW_ROC_DAQ_CTRL_ALL_w11,,8,RW,,,,I2C_RW_SyncHeader,0,4,,0xa,TRUE,FALSE,FALSE,,,The value of the first 4 bits of a sync word if the sync word happens on any other bucket.
RW_ROC_DAQ_CTRL_ALL_w11,,8,RW,,,,I2C_RW_hgcroc_hdr_marker,4,4,,0xf,TRUE,FALSE,FALSE,,,4-bit header marker transmitted by HGCROC at beginning of packet (programmable for backwards compatibility in HGCROCv3). 4h'5 for HGCROC3 and 4h'F for HGCROC3b.
RW_ROC_DAQ_CTRL_ALL_w12,,8,RW,,,,I2C_RW_EBR_Timeout,0,8,,0x40,TRUE,FALSE,FALSE,,,After an EBR the ROC_DAQ_Controller ignores HGCROC packets with a normal TRL marker in the header while it looks for a reset TRL marker. The timeout ends this operation. Value in BC; if 0 timeout is disabled (infinite).
RW_ROC_DAQ_CTRL_ALL_w13,,8,RW,,,,I2C_RW_EBR_Timeout,0,8,,0x0,TRUE,FALSE,FALSE,,,After an EBR the ROC_DAQ_Controller ignores HGCROC packets with a normal TRL marker in the header while it looks for a reset TRL marker. The timeout ends this operation. Value in BC; if 0 timeout is disabled (infinite).
RO_ROC_DAQ_CTRL_ALL_w0,,8,RO,,,,I2C_RO_Prediction_Confidence,0,8,,0x0,TRUE,FALSE,TRUE,,,Increments by 1 to a maximum of 255 every time there is a good prediction.  Decrements by 16 to a minimum of 0 every time there is a bad prediction.  Default of 128.
RO_ROC_DAQ_CTRL_ALL_w1,,8,RO,,,,I2C_RO_Prediction_DelayCount,0,8,,0x0,TRUE,FALSE,TRUE,,,A count of the delay (in LHC clock ticks) between receiving an L1A and receiving a Header.
RO_ROC_DAQ_CTRL_ALL_w2,,8,RO,,,,I2C_RO_HdrCount_x12_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w3,,8,RO,,,,I2C_RO_HdrCount_x12_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w4,,8,RO,,,,I2C_RO_HdrCount_x12_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w5,,8,RO,,,,I2C_RO_HdrCount_x12_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w6,,8,RO,,,,I2C_RO_HdrCount_x12_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w7,,8,RO,,,,I2C_RO_HdrCount_x12_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w8,,8,RO,,,,I2C_RO_HdrCount_x12_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w9,,8,RO,,,,I2C_RO_HdrCount_x12_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w10,,8,RO,,,,I2C_RO_HdrCount_x12_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w11,,8,RO,,,,I2C_RO_HdrCount_x12_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w12,,8,RO,,,,I2C_RO_HdrCount_x12_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w13,,8,RO,,,,I2C_RO_HdrCount_x12_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w14,,8,RO,,,,I2C_RO_HdrCount_x12_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w15,,8,RO,,,,I2C_RO_HdrCount_x12_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w16,,8,RO,,,,I2C_RO_HdrCount_x12_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w17,,8,RO,,,,I2C_RO_HdrCount_x12_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w18,,8,RO,,,,I2C_RO_HdrCount_x12_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w19,,8,RO,,,,I2C_RO_HdrCount_x12_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w20,,8,RO,,,,I2C_RO_HdrCount_x12_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w21,,8,RO,,,,I2C_RO_HdrCount_x12_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w22,,8,RO,,,,I2C_RO_HdrCount_x12_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w23,,8,RO,,,,I2C_RO_HdrCount_x12_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w24,,8,RO,,,,I2C_RO_HdrCount_x12_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w25,,8,RO,,,,I2C_RO_HdrCount_x12_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w26,,8,RO,,,,I2C_RO_Confidence_x12_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w27,,8,RO,,,,I2C_RO_Confidence_x12_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w28,,8,RO,,,,I2C_RO_Confidence_x12_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w29,,8,RO,,,,I2C_RO_Confidence_x12_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w30,,8,RO,,,,I2C_RO_Confidence_x12_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w31,,8,RO,,,,I2C_RO_Confidence_x12_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w32,,8,RO,,,,I2C_RO_Confidence_x12_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w33,,8,RO,,,,I2C_RO_Confidence_x12_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w34,,8,RO,,,,I2C_RO_Confidence_x12_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w35,,8,RO,,,,I2C_RO_Confidence_x12_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w36,,8,RO,,,,I2C_RO_Confidence_x12_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w37,,8,RO,,,,I2C_RO_Confidence_x12_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,I2C_RO_Error_Flags_BunchCounter,0,1,,0x0,TRUE,FALSE,TRUE,,,Error indicator: bad bunch counter. Cleared by I2C_WO_clear_Errors.
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,I2C_RO_Error_Flags_UnusedState,1,1,,0x0,TRUE,FALSE,TRUE,,,Error indicator: entered unused state in ROC. Cleared by I2C_WO_clear_Errors.
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,I2C_RO_Error_Flags_MissedPkt,2,1,,0x0,TRUE,FALSE,TRUE,,,Error indicator: missed a packet. Cleared by I2C_WO_clear_Errors.
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,I2C_RO_Error_Flags_PredictorFIFOfull,3,1,,0x0,TRUE,FALSE,TRUE,,,Error indicator: predictor FIFO Full. Cleared by I2C_WO_clear_Errors.
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,I2C_RO_Error_Flags_L1AFIFO_full,4,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w38,,8,RO,,,,RSVD0,5,3,,0x0,FALSE,TRUE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w39,,8,RO,,,,I2C_RO_Status_ROC_State,0,6,,0x3c,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w39,,8,RO,,,,I2C_RO_Status_Pred_State,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w40,,8,RO,,,,I2C_RO_Status_Pred_State,0,4,,0xf,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w40,,8,RO,,,,I2C_RO_Status_Bucket,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w41,,8,RO,,,,I2C_RO_Status_Bucket,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w42,,8,RO,,,,I2C_RO_Status_Orbit,0,3,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w42,,8,RO,,,,I2C_RO_Status_L1AFIFO_empty,3,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w42,,8,RO,,,,I2C_RO_Status_L1AFIFO_full,4,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w42,,8,RO,,,,I2C_RO_Status_L1AFIFO_cnt,5,3,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w43,,8,RO,,,,I2C_RO_Status_L1AFIFO_cnt,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w43,,8,RO,,,,I2C_RO_Status_Predict,4,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w43,,8,RO,,,,I2C_RO_Status_Predict_HGCROC,5,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w43,,8,RO,,,,I2C_RO_Status_FIFOtop_Bucket,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w44,,8,RO,,,,I2C_RO_Status_FIFOtop_Bucket,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w45,,8,RO,,,,I2C_RO_Status_FIFOtop_Bucket,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w45,,8,RO,,,,I2C_RO_Status_FIFOtop_Orbit,2,3,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w45,,8,RO,,,,I2C_RO_Status_FIFOtop_Event,5,3,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w46,,8,RO,,,,I2C_RO_Status_FIFOtop_Event,0,3,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w46,,8,RO,,,,I2C_RO_Status_FIFOtop_NZS,3,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w46,,8,RO,,,,I2C_RO_Status_IdleWordMarker,4,1,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w46,,8,RO,,,,I2C_RO_Status_ROCHeaderMarker,5,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w46,,8,RO,,,,I2C_RO_Status_FCmd,7,1,,0x0,TRUE,FALSE,TRUE,,,Instantaneous value of the fast command block output (one bit per fast command). Sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). 0:EBR_FCmd; 1:ECR_FCmd; 2:OCR_FCmd; 3:BCR_FCmd; 4:LRST_FCmd; 5:L1A_FCmd; 6:NZS_FCmd.
RO_ROC_DAQ_CTRL_ALL_w47,,8,RO,,,,I2C_RO_Status_FCmd,0,6,,0x0,TRUE,FALSE,TRUE,,,Instantaneous value of the fast command block output (one bit per fast command). Sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command). 0:EBR_FCmd; 1:ECR_FCmd; 2:OCR_FCmd; 3:BCR_FCmd; 4:LRST_FCmd; 5:L1A_FCmd; 6:NZS_FCmd.
RO_ROC_DAQ_CTRL_ALL_w47,,8,RO,,,,I2C_RO_Status_Event,6,2,,0x0,TRUE,FALSE,TRUE,,,Instantaneous value of the event counter. Sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command).
RO_ROC_DAQ_CTRL_ALL_w48,,8,RO,,,,I2C_RO_Status_Event,0,4,,0x0,TRUE,FALSE,TRUE,,,Instantaneous value of the event counter. Sampled by I2C_WO_Strobes_2_Status_Capture (or status capture fast command).
RO_ROC_DAQ_CTRL_ALL_w48,,8,RO,,,,RSVD1,4,4,,0x0,FALSE,TRUE,TRUE,,,
RO_ROC_DAQ_CTRL_ALL_w49,,8,RO,,,,tmr_err_cnt_roc_daq_ctrl,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_ELINK_PROCESSORS_ALL_w0,,8,RW,,,,I2C_RW_vReconstruct_thresh,0,4,,0x0,TRUE,FALSE,FALSE,,,Lower bound (>) for number of eRXs that should have the same EBO for the vertical reconstruction to be successful. Should be < 12.
RW_ELINK_PROCESSORS_ALL_w0,,8,RW,,,,RSVD0,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w1,,8,RW,,,,I2C_RW_ReconMode_Choice,0,4,,0x0,TRUE,FALSE,FALSE,,,eRX used to reconstruct EBO if I2C_RW_ReconMode_Results is in User's Choice. Should be <12.
RW_ELINK_PROCESSORS_ALL_w1,,8,RW,,,,I2C_RW_ReconMode_Result,4,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w1,,8,RW,,,,RSVD1,6,2,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w2,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0xab,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w3,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0x89,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w4,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0x67,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w5,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0x45,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w6,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0x23,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w7,,8,RW,,,,I2C_RW_CM_eRX_Route,0,8,,0x1,TRUE,FALSE,FALSE,,,48-bit routing addresses for Channels in determining Common Mode.
RW_ELINK_PROCESSORS_ALL_w8,,8,RW,,,,I2C_RW_CM_Selection_x12_00,0,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w8,,8,RW,,,,I2C_RW_CM_Selection_x12_01,3,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w8,,8,RW,,,,I2C_RW_CM_Selection_x12_02,6,2,,0x2,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w9,,8,RW,,,,I2C_RW_CM_Selection_x12_02,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w9,,8,RW,,,,I2C_RW_CM_Selection_x12_03,1,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w9,,8,RW,,,,I2C_RW_CM_Selection_x12_04,4,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w9,,8,RW,,,,I2C_RW_CM_Selection_x12_05,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w10,,8,RW,,,,I2C_RW_CM_Selection_x12_05,0,2,,0x3,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w10,,8,RW,,,,I2C_RW_CM_Selection_x12_06,2,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w10,,8,RW,,,,I2C_RW_CM_Selection_x12_07,5,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w11,,8,RW,,,,I2C_RW_CM_Selection_x12_08,0,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w11,,8,RW,,,,I2C_RW_CM_Selection_x12_09,3,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w11,,8,RW,,,,I2C_RW_CM_Selection_x12_10,6,2,,0x2,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w12,,8,RW,,,,I2C_RW_CM_Selection_x12_10,0,1,,0x1,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w12,,8,RW,,,,I2C_RW_CM_Selection_x12_11,1,3,,0x6,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w12,,8,RW,,,,RSVD2,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w13,,8,RW,,,,I2C_RW_CM_UserDef_x12_00,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w14,,8,RW,,,,I2C_RW_CM_UserDef_x12_00,0,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w14,,8,RW,,,,I2C_RW_CM_UserDef_x12_01,2,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w15,,8,RW,,,,I2C_RW_CM_UserDef_x12_01,0,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w15,,8,RW,,,,I2C_RW_CM_UserDef_x12_02,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w16,,8,RW,,,,I2C_RW_CM_UserDef_x12_02,0,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w16,,8,RW,,,,I2C_RW_CM_UserDef_x12_03,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w17,,8,RW,,,,I2C_RW_CM_UserDef_x12_03,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w18,,8,RW,,,,I2C_RW_CM_UserDef_x12_04,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w19,,8,RW,,,,I2C_RW_CM_UserDef_x12_04,0,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w19,,8,RW,,,,I2C_RW_CM_UserDef_x12_05,2,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w20,,8,RW,,,,I2C_RW_CM_UserDef_x12_05,0,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w20,,8,RW,,,,I2C_RW_CM_UserDef_x12_06,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w21,,8,RW,,,,I2C_RW_CM_UserDef_x12_06,0,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w21,,8,RW,,,,I2C_RW_CM_UserDef_x12_07,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w22,,8,RW,,,,I2C_RW_CM_UserDef_x12_07,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w23,,8,RW,,,,I2C_RW_CM_UserDef_x12_08,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w24,,8,RW,,,,I2C_RW_CM_UserDef_x12_08,0,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w24,,8,RW,,,,I2C_RW_CM_UserDef_x12_09,2,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w25,,8,RW,,,,I2C_RW_CM_UserDef_x12_09,0,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w25,,8,RW,,,,I2C_RW_CM_UserDef_x12_10,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w26,,8,RW,,,,I2C_RW_CM_UserDef_x12_10,0,6,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w26,,8,RW,,,,I2C_RW_CM_UserDef_x12_11,6,2,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w27,,8,RW,,,,I2C_RW_CM_UserDef_x12_11,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w28,,8,RW,,,,I2C_RW_eRX_Mask_HT,0,8,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask HT mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w29,,8,RW,,,,I2C_RW_eRX_Mask_HT,0,4,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask HT mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w29,,8,RW,,,,RSVD3,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w30,,8,RW,,,,I2C_RW_eRX_Mask_EBO,0,8,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask EBO mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w31,,8,RW,,,,I2C_RW_eRX_Mask_EBO,0,4,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask EBO mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w31,,8,RW,,,,RSVD4,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w32,,8,RW,,,,I2C_RW_eRX_Mask_CRC,0,8,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask CRC mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w33,,8,RW,,,,I2C_RW_eRX_Mask_CRC,0,4,,0x0,TRUE,FALSE,FALSE,,,12-bit (one for each ERX) each bit set to a 1 to mask CRC mismatch error from sub-packet F- and E-bit formation.
RW_ELINK_PROCESSORS_ALL_w33,,8,RW,,,,RSVD5,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w34,,8,RW,,,,I2C_RW_eRX_Override_SubP_Suppress,0,8,,0x0,TRUE,FALSE,FALSE,,,DEPRECATED: no effect on ECOND.
RW_ELINK_PROCESSORS_ALL_w35,,8,RW,,,,I2C_RW_eRX_Override_SubP_Suppress,0,4,,0x0,TRUE,FALSE,FALSE,,,DEPRECATED: no effect on ECOND.
RW_ELINK_PROCESSORS_ALL_w35,,8,RW,,,,RSVD6,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_ELINK_PROCESSORS_ALL_w36,,8,RW,,,,I2C_RW_Veto_Pass1_Fail0,0,8,,0x3,TRUE,FALSE,FALSE,,,16-bit vector to select which event status results will veto a packet.
RW_ELINK_PROCESSORS_ALL_w37,,8,RW,,,,I2C_RW_Veto_Pass1_Fail0,0,8,,0x3,TRUE,FALSE,FALSE,,,16-bit vector to select which event status results will veto a packet.
RO_ELINK_PROCESSORS_ALL_w0,,8,RO,,,,I2C_RO_Status_selectedCM_eRX0,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w1,,8,RO,,,,I2C_RO_Status_selectedCM_eRX0,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w1,,8,RO,,,,I2C_RO_Status_selectedCM_eRX1,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w2,,8,RO,,,,I2C_RO_Status_selectedCM_eRX1,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w2,,8,RO,,,,I2C_RO_Status_selectedCM_eRX2,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w3,,8,RO,,,,I2C_RO_Status_selectedCM_eRX2,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w3,,8,RO,,,,I2C_RO_Status_selectedCM_eRX3,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w4,,8,RO,,,,I2C_RO_Status_selectedCM_eRX3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w5,,8,RO,,,,I2C_RO_Status_selectedCM_eRX4,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w6,,8,RO,,,,I2C_RO_Status_selectedCM_eRX4,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w6,,8,RO,,,,I2C_RO_Status_selectedCM_eRX5,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w7,,8,RO,,,,I2C_RO_Status_selectedCM_eRX5,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w7,,8,RO,,,,I2C_RO_Status_selectedCM_eRX6,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w8,,8,RO,,,,I2C_RO_Status_selectedCM_eRX6,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w8,,8,RO,,,,I2C_RO_Status_selectedCM_eRX7,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w9,,8,RO,,,,I2C_RO_Status_selectedCM_eRX7,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w10,,8,RO,,,,I2C_RO_Status_selectedCM_eRX8,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w11,,8,RO,,,,I2C_RO_Status_selectedCM_eRX8,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w11,,8,RO,,,,I2C_RO_Status_selectedCM_eRX9,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w12,,8,RO,,,,I2C_RO_Status_selectedCM_eRX9,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w12,,8,RO,,,,I2C_RO_Status_selectedCM_eRX10,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w13,,8,RO,,,,I2C_RO_Status_selectedCM_eRX10,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w13,,8,RO,,,,I2C_RO_Status_selectedCM_eRX11,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w14,,8,RO,,,,I2C_RO_Status_selectedCM_eRX11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w15,,8,RO,,,,I2C_RO_Status_CM_ROC0,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w16,,8,RO,,,,I2C_RO_Status_CM_ROC0,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w16,,8,RO,,,,I2C_RO_Status_CM_ROC1,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w17,,8,RO,,,,I2C_RO_Status_CM_ROC1,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w17,,8,RO,,,,I2C_RO_Status_CM_ROC2,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w18,,8,RO,,,,I2C_RO_Status_CM_ROC2,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w18,,8,RO,,,,I2C_RO_Status_CM_ROC3,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w19,,8,RO,,,,I2C_RO_Status_CM_ROC3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w20,,8,RO,,,,I2C_RO_Status_CM_ROC4,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w21,,8,RO,,,,I2C_RO_Status_CM_ROC4,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w21,,8,RO,,,,I2C_RO_Status_CM_ROC5,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w22,,8,RO,,,,I2C_RO_Status_CM_ROC5,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w22,,8,RO,,,,I2C_RO_Status_CM_MOD,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w23,,8,RO,,,,I2C_RO_Status_CM_MOD,0,6,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w23,,8,RO,,,,I2C_RO_Status_Raw_v_Selected_matchSet,6,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w24,,8,RO,,,,I2C_RO_Status_Raw_v_Selected_matchSet,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w25,,8,RO,,,,I2C_RO_Status_Raw_v_Selected_matchSet,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w25,,8,RO,,,,RSVD0,2,6,,0x0,FALSE,TRUE,TRUE,,,
RO_ELINK_PROCESSORS_ALL_w26,,8,RO,,,,tmr_err_cnt_elink_processors,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_PINGPONG_SRAM_ALL_w0,,8,RW,,,,I2C_RW_Interface_Select,0,5,,0x0,TRUE,FALSE,FALSE,,,
RW_PINGPONG_SRAM_ALL_w0,,8,RW,,,,RSVD0,5,3,,0x0,FALSE,TRUE,FALSE,,,
RO_PINGPONG_SRAM_ALL_w0,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test1,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test1 (Data=Addr)
RO_PINGPONG_SRAM_ALL_w1,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test1,0,4,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test1 (Data=Addr)
RO_PINGPONG_SRAM_ALL_w1,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test2,4,4,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=5A)
RO_PINGPONG_SRAM_ALL_w2,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test2,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=5A)
RO_PINGPONG_SRAM_ALL_w3,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test3,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=A5)
RO_PINGPONG_SRAM_ALL_w4,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test3,0,4,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=A5)
RO_PINGPONG_SRAM_ALL_w4,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test4,4,4,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=00)
RO_PINGPONG_SRAM_ALL_w5,,8,RO,,,,I2C_RO_SRAM_BIST_Result_Test4,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bit (one for each pingPong SRAM bank) indicating which passed (=1) or failed (=0) BIST Test2 (Data=00)
RO_PINGPONG_SRAM_ALL_w6,,8,RO,,,,I2C_RO_Status_ppState,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w6,,8,RO,,,,I2C_RO_Status_Read_State,2,6,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_dataAvailable,0,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_EmptyH_Available,1,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_ppFinished,2,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_Start_Readout,3,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_ppFlush,4,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_Bad_PP_Read_State,5,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_EmptyH_FIFO_Read,6,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w7,,8,RO,,,,I2C_RO_Status_Pong_RW,7,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w8,,8,RO,,,,I2C_RO_Status_Pong_RW,0,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w8,,8,RO,,,,I2C_RO_Status_EmptyH_FIFO_full,1,1,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w8,,8,RO,,,,I2C_RO_Status_EmptyH_FIFO_count,2,3,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w8,,8,RO,,,,RSVD0,5,3,,0x0,FALSE,TRUE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w9,,8,RO,,,,I2C_RO_Status_Interface1,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w10,,8,RO,,,,I2C_RO_Status_Interface1,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w11,,8,RO,,,,I2C_RO_Status_Interface2,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w12,,8,RO,,,,I2C_RO_Status_Interface2,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w13,,8,RO,,,,I2C_RO_Status_Interface3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w14,,8,RO,,,,I2C_RO_Status_Interface3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w15,,8,RO,,,,I2C_RO_Status_Interface3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w16,,8,RO,,,,I2C_RO_Status_Interface3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w17,,8,RO,,,,I2C_RO_Status_Interface3,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_PINGPONG_SRAM_ALL_w18,,8,RO,,,,tmr_err_cnt_pingpong_sram_bist_ctrl,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_ZERO_SUPPRESS_COMMON_ALL_w0,,8,RW,,,,ZS_ce,0,8,,0x0,TRUE,FALSE,FALSE,,,Channel Processor constant
RW_ZERO_SUPPRESS_COMMON_ALL_w1,,8,RW,,,,ZS_ce,0,2,,0x0,TRUE,FALSE,FALSE,,,Channel Processor constant
RW_ZERO_SUPPRESS_COMMON_ALL_w1,,8,RW,,,,RSVD0,2,6,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w0,,8,RW,,,,ZS_lambda_00,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w0,,8,RW,,,,ZS_kapa_00,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w1,,8,RW,,,,ZS_kapa_00,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w1,,8,RW,,,,ZS_c_i_00,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w2,,8,RW,,,,ZS_c_i_00,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w2,,8,RW,,,,ZS_pass_i_00,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w2,,8,RW,,,,ZS_mask_i_00,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w2,,8,RW,,,,RSVD0,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w3,,8,RW,,,,ZS_lambda_01,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w3,,8,RW,,,,ZS_kapa_01,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w4,,8,RW,,,,ZS_kapa_01,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w4,,8,RW,,,,ZS_c_i_01,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w5,,8,RW,,,,ZS_c_i_01,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w5,,8,RW,,,,ZS_pass_i_01,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w5,,8,RW,,,,ZS_mask_i_01,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w5,,8,RW,,,,RSVD1,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w6,,8,RW,,,,ZS_lambda_02,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w6,,8,RW,,,,ZS_kapa_02,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w7,,8,RW,,,,ZS_kapa_02,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w7,,8,RW,,,,ZS_c_i_02,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w8,,8,RW,,,,ZS_c_i_02,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w8,,8,RW,,,,ZS_pass_i_02,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w8,,8,RW,,,,ZS_mask_i_02,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w8,,8,RW,,,,RSVD2,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w9,,8,RW,,,,ZS_lambda_03,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w9,,8,RW,,,,ZS_kapa_03,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w10,,8,RW,,,,ZS_kapa_03,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w10,,8,RW,,,,ZS_c_i_03,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w11,,8,RW,,,,ZS_c_i_03,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w11,,8,RW,,,,ZS_pass_i_03,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w11,,8,RW,,,,ZS_mask_i_03,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w11,,8,RW,,,,RSVD3,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w12,,8,RW,,,,ZS_lambda_04,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w12,,8,RW,,,,ZS_kapa_04,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w13,,8,RW,,,,ZS_kapa_04,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w13,,8,RW,,,,ZS_c_i_04,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w14,,8,RW,,,,ZS_c_i_04,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w14,,8,RW,,,,ZS_pass_i_04,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w14,,8,RW,,,,ZS_mask_i_04,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w14,,8,RW,,,,RSVD4,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w15,,8,RW,,,,ZS_lambda_05,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w15,,8,RW,,,,ZS_kapa_05,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w16,,8,RW,,,,ZS_kapa_05,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w16,,8,RW,,,,ZS_c_i_05,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w17,,8,RW,,,,ZS_c_i_05,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w17,,8,RW,,,,ZS_pass_i_05,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w17,,8,RW,,,,ZS_mask_i_05,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w17,,8,RW,,,,RSVD5,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w18,,8,RW,,,,ZS_lambda_06,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w18,,8,RW,,,,ZS_kapa_06,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w19,,8,RW,,,,ZS_kapa_06,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w19,,8,RW,,,,ZS_c_i_06,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w20,,8,RW,,,,ZS_c_i_06,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w20,,8,RW,,,,ZS_pass_i_06,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w20,,8,RW,,,,ZS_mask_i_06,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w20,,8,RW,,,,RSVD6,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w21,,8,RW,,,,ZS_lambda_07,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w21,,8,RW,,,,ZS_kapa_07,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w22,,8,RW,,,,ZS_kapa_07,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w22,,8,RW,,,,ZS_c_i_07,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w23,,8,RW,,,,ZS_c_i_07,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w23,,8,RW,,,,ZS_pass_i_07,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w23,,8,RW,,,,ZS_mask_i_07,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w23,,8,RW,,,,RSVD7,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w24,,8,RW,,,,ZS_lambda_08,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w24,,8,RW,,,,ZS_kapa_08,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w25,,8,RW,,,,ZS_kapa_08,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w25,,8,RW,,,,ZS_c_i_08,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w26,,8,RW,,,,ZS_c_i_08,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w26,,8,RW,,,,ZS_pass_i_08,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w26,,8,RW,,,,ZS_mask_i_08,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w26,,8,RW,,,,RSVD8,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w27,,8,RW,,,,ZS_lambda_09,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w27,,8,RW,,,,ZS_kapa_09,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w28,,8,RW,,,,ZS_kapa_09,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w28,,8,RW,,,,ZS_c_i_09,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w29,,8,RW,,,,ZS_c_i_09,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w29,,8,RW,,,,ZS_pass_i_09,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w29,,8,RW,,,,ZS_mask_i_09,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w29,,8,RW,,,,RSVD9,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w30,,8,RW,,,,ZS_lambda_10,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w30,,8,RW,,,,ZS_kapa_10,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w31,,8,RW,,,,ZS_kapa_10,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w31,,8,RW,,,,ZS_c_i_10,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w32,,8,RW,,,,ZS_c_i_10,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w32,,8,RW,,,,ZS_pass_i_10,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w32,,8,RW,,,,ZS_mask_i_10,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w32,,8,RW,,,,RSVD10,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w33,,8,RW,,,,ZS_lambda_11,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w33,,8,RW,,,,ZS_kapa_11,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w34,,8,RW,,,,ZS_kapa_11,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w34,,8,RW,,,,ZS_c_i_11,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w35,,8,RW,,,,ZS_c_i_11,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w35,,8,RW,,,,ZS_pass_i_11,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w35,,8,RW,,,,ZS_mask_i_11,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w35,,8,RW,,,,RSVD11,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w36,,8,RW,,,,ZS_lambda_12,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w36,,8,RW,,,,ZS_kapa_12,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w37,,8,RW,,,,ZS_kapa_12,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w37,,8,RW,,,,ZS_c_i_12,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w38,,8,RW,,,,ZS_c_i_12,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w38,,8,RW,,,,ZS_pass_i_12,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w38,,8,RW,,,,ZS_mask_i_12,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w38,,8,RW,,,,RSVD12,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w39,,8,RW,,,,ZS_lambda_13,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w39,,8,RW,,,,ZS_kapa_13,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w40,,8,RW,,,,ZS_kapa_13,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w40,,8,RW,,,,ZS_c_i_13,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w41,,8,RW,,,,ZS_c_i_13,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w41,,8,RW,,,,ZS_pass_i_13,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w41,,8,RW,,,,ZS_mask_i_13,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w41,,8,RW,,,,RSVD13,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w42,,8,RW,,,,ZS_lambda_14,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w42,,8,RW,,,,ZS_kapa_14,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w43,,8,RW,,,,ZS_kapa_14,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w43,,8,RW,,,,ZS_c_i_14,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w44,,8,RW,,,,ZS_c_i_14,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w44,,8,RW,,,,ZS_pass_i_14,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w44,,8,RW,,,,ZS_mask_i_14,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w44,,8,RW,,,,RSVD14,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w45,,8,RW,,,,ZS_lambda_15,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w45,,8,RW,,,,ZS_kapa_15,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w46,,8,RW,,,,ZS_kapa_15,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w46,,8,RW,,,,ZS_c_i_15,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w47,,8,RW,,,,ZS_c_i_15,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w47,,8,RW,,,,ZS_pass_i_15,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w47,,8,RW,,,,ZS_mask_i_15,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w47,,8,RW,,,,RSVD15,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w48,,8,RW,,,,ZS_lambda_16,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w48,,8,RW,,,,ZS_kapa_16,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w49,,8,RW,,,,ZS_kapa_16,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w49,,8,RW,,,,ZS_c_i_16,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w50,,8,RW,,,,ZS_c_i_16,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w50,,8,RW,,,,ZS_pass_i_16,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w50,,8,RW,,,,ZS_mask_i_16,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w50,,8,RW,,,,RSVD16,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w51,,8,RW,,,,ZS_lambda_17,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w51,,8,RW,,,,ZS_kapa_17,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w52,,8,RW,,,,ZS_kapa_17,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w52,,8,RW,,,,ZS_c_i_17,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w53,,8,RW,,,,ZS_c_i_17,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w53,,8,RW,,,,ZS_pass_i_17,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w53,,8,RW,,,,ZS_mask_i_17,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w53,,8,RW,,,,RSVD17,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w54,,8,RW,,,,ZS_lambda_18,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w54,,8,RW,,,,ZS_kapa_18,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w55,,8,RW,,,,ZS_kapa_18,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w55,,8,RW,,,,ZS_c_i_18,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w56,,8,RW,,,,ZS_c_i_18,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w56,,8,RW,,,,ZS_pass_i_18,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w56,,8,RW,,,,ZS_mask_i_18,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w56,,8,RW,,,,RSVD18,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w57,,8,RW,,,,ZS_lambda_19,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w57,,8,RW,,,,ZS_kapa_19,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w58,,8,RW,,,,ZS_kapa_19,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w58,,8,RW,,,,ZS_c_i_19,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w59,,8,RW,,,,ZS_c_i_19,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w59,,8,RW,,,,ZS_pass_i_19,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w59,,8,RW,,,,ZS_mask_i_19,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w59,,8,RW,,,,RSVD19,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w60,,8,RW,,,,ZS_lambda_20,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w60,,8,RW,,,,ZS_kapa_20,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w61,,8,RW,,,,ZS_kapa_20,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w61,,8,RW,,,,ZS_c_i_20,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w62,,8,RW,,,,ZS_c_i_20,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w62,,8,RW,,,,ZS_pass_i_20,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w62,,8,RW,,,,ZS_mask_i_20,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w62,,8,RW,,,,RSVD20,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w63,,8,RW,,,,ZS_lambda_21,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w63,,8,RW,,,,ZS_kapa_21,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w64,,8,RW,,,,ZS_kapa_21,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w64,,8,RW,,,,ZS_c_i_21,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w65,,8,RW,,,,ZS_c_i_21,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w65,,8,RW,,,,ZS_pass_i_21,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w65,,8,RW,,,,ZS_mask_i_21,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w65,,8,RW,,,,RSVD21,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w66,,8,RW,,,,ZS_lambda_22,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w66,,8,RW,,,,ZS_kapa_22,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w67,,8,RW,,,,ZS_kapa_22,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w67,,8,RW,,,,ZS_c_i_22,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w68,,8,RW,,,,ZS_c_i_22,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w68,,8,RW,,,,ZS_pass_i_22,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w68,,8,RW,,,,ZS_mask_i_22,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w68,,8,RW,,,,RSVD22,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w69,,8,RW,,,,ZS_lambda_23,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w69,,8,RW,,,,ZS_kapa_23,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w70,,8,RW,,,,ZS_kapa_23,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w70,,8,RW,,,,ZS_c_i_23,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w71,,8,RW,,,,ZS_c_i_23,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w71,,8,RW,,,,ZS_pass_i_23,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w71,,8,RW,,,,ZS_mask_i_23,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w71,,8,RW,,,,RSVD23,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w72,,8,RW,,,,ZS_lambda_24,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w72,,8,RW,,,,ZS_kapa_24,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w73,,8,RW,,,,ZS_kapa_24,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w73,,8,RW,,,,ZS_c_i_24,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w74,,8,RW,,,,ZS_c_i_24,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w74,,8,RW,,,,ZS_pass_i_24,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w74,,8,RW,,,,ZS_mask_i_24,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w74,,8,RW,,,,RSVD24,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w75,,8,RW,,,,ZS_lambda_25,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w75,,8,RW,,,,ZS_kapa_25,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w76,,8,RW,,,,ZS_kapa_25,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w76,,8,RW,,,,ZS_c_i_25,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w77,,8,RW,,,,ZS_c_i_25,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w77,,8,RW,,,,ZS_pass_i_25,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w77,,8,RW,,,,ZS_mask_i_25,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w77,,8,RW,,,,RSVD25,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w78,,8,RW,,,,ZS_lambda_26,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w78,,8,RW,,,,ZS_kapa_26,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w79,,8,RW,,,,ZS_kapa_26,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w79,,8,RW,,,,ZS_c_i_26,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w80,,8,RW,,,,ZS_c_i_26,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w80,,8,RW,,,,ZS_pass_i_26,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w80,,8,RW,,,,ZS_mask_i_26,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w80,,8,RW,,,,RSVD26,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w81,,8,RW,,,,ZS_lambda_27,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w81,,8,RW,,,,ZS_kapa_27,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w82,,8,RW,,,,ZS_kapa_27,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w82,,8,RW,,,,ZS_c_i_27,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w83,,8,RW,,,,ZS_c_i_27,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w83,,8,RW,,,,ZS_pass_i_27,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w83,,8,RW,,,,ZS_mask_i_27,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w83,,8,RW,,,,RSVD27,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w84,,8,RW,,,,ZS_lambda_28,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w84,,8,RW,,,,ZS_kapa_28,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w85,,8,RW,,,,ZS_kapa_28,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w85,,8,RW,,,,ZS_c_i_28,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w86,,8,RW,,,,ZS_c_i_28,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w86,,8,RW,,,,ZS_pass_i_28,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w86,,8,RW,,,,ZS_mask_i_28,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w86,,8,RW,,,,RSVD28,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w87,,8,RW,,,,ZS_lambda_29,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w87,,8,RW,,,,ZS_kapa_29,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w88,,8,RW,,,,ZS_kapa_29,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w88,,8,RW,,,,ZS_c_i_29,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w89,,8,RW,,,,ZS_c_i_29,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w89,,8,RW,,,,ZS_pass_i_29,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w89,,8,RW,,,,ZS_mask_i_29,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w89,,8,RW,,,,RSVD29,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w90,,8,RW,,,,ZS_lambda_30,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w90,,8,RW,,,,ZS_kapa_30,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w91,,8,RW,,,,ZS_kapa_30,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w91,,8,RW,,,,ZS_c_i_30,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w92,,8,RW,,,,ZS_c_i_30,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w92,,8,RW,,,,ZS_pass_i_30,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w92,,8,RW,,,,ZS_mask_i_30,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w92,,8,RW,,,,RSVD30,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w93,,8,RW,,,,ZS_lambda_31,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w93,,8,RW,,,,ZS_kapa_31,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w94,,8,RW,,,,ZS_kapa_31,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w94,,8,RW,,,,ZS_c_i_31,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w95,,8,RW,,,,ZS_c_i_31,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w95,,8,RW,,,,ZS_pass_i_31,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w95,,8,RW,,,,ZS_mask_i_31,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w95,,8,RW,,,,RSVD31,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w96,,8,RW,,,,ZS_lambda_32,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w96,,8,RW,,,,ZS_kapa_32,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w97,,8,RW,,,,ZS_kapa_32,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w97,,8,RW,,,,ZS_c_i_32,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w98,,8,RW,,,,ZS_c_i_32,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w98,,8,RW,,,,ZS_pass_i_32,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w98,,8,RW,,,,ZS_mask_i_32,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w98,,8,RW,,,,RSVD32,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w99,,8,RW,,,,ZS_lambda_33,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w99,,8,RW,,,,ZS_kapa_33,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w100,,8,RW,,,,ZS_kapa_33,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w100,,8,RW,,,,ZS_c_i_33,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w101,,8,RW,,,,ZS_c_i_33,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w101,,8,RW,,,,ZS_pass_i_33,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w101,,8,RW,,,,ZS_mask_i_33,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w101,,8,RW,,,,RSVD33,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w102,,8,RW,,,,ZS_lambda_34,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w102,,8,RW,,,,ZS_kapa_34,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w103,,8,RW,,,,ZS_kapa_34,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w103,,8,RW,,,,ZS_c_i_34,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w104,,8,RW,,,,ZS_c_i_34,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w104,,8,RW,,,,ZS_pass_i_34,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w104,,8,RW,,,,ZS_mask_i_34,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w104,,8,RW,,,,RSVD34,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w105,,8,RW,,,,ZS_lambda_35,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w105,,8,RW,,,,ZS_kapa_35,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w106,,8,RW,,,,ZS_kapa_35,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w106,,8,RW,,,,ZS_c_i_35,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w107,,8,RW,,,,ZS_c_i_35,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w107,,8,RW,,,,ZS_pass_i_35,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w107,,8,RW,,,,ZS_mask_i_35,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w107,,8,RW,,,,RSVD35,7,1,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w108,,8,RW,,,,ZS_lambda_36,0,7,,0x20,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w108,,8,RW,,,,ZS_kapa_36,7,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w109,,8,RW,,,,ZS_kapa_36,0,5,,0x10,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w109,,8,RW,,,,ZS_c_i_36,5,3,,0x7,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w110,,8,RW,,,,ZS_c_i_36,0,5,,0x1f,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w110,,8,RW,,,,ZS_pass_i_36,5,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w110,,8,RW,,,,ZS_mask_i_36,6,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_xx_ALL_w110,,8,RW,,,,RSVD36,7,1,,0x0,FALSE,TRUE,FALSE,,,
RO_ZERO_SUPPRESS_ALL_w0,,8,RO,,,,tmr_err_cnt_zero_suppress,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_ZERO_SUPPRESS_M1_xx_ALL_w0,,8,RW,,,,ZS_c_i_m1_00,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w0,,8,RW,,,,ZS_beta_m1_00,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w1,,8,RW,,,,ZS_beta_m1_00,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w1,,8,RW,,,,ZS_pass_i_m1_00,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w1,,8,RW,,,,ZS_mask_i_m1_00,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w1,,8,RW,,,,RSVD0,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w2,,8,RW,,,,ZS_c_i_m1_01,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w2,,8,RW,,,,ZS_beta_m1_01,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w3,,8,RW,,,,ZS_beta_m1_01,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w3,,8,RW,,,,ZS_pass_i_m1_01,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w3,,8,RW,,,,ZS_mask_i_m1_01,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w3,,8,RW,,,,RSVD1,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w4,,8,RW,,,,ZS_c_i_m1_02,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w4,,8,RW,,,,ZS_beta_m1_02,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w5,,8,RW,,,,ZS_beta_m1_02,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w5,,8,RW,,,,ZS_pass_i_m1_02,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w5,,8,RW,,,,ZS_mask_i_m1_02,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w5,,8,RW,,,,RSVD2,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w6,,8,RW,,,,ZS_c_i_m1_03,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w6,,8,RW,,,,ZS_beta_m1_03,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w7,,8,RW,,,,ZS_beta_m1_03,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w7,,8,RW,,,,ZS_pass_i_m1_03,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w7,,8,RW,,,,ZS_mask_i_m1_03,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w7,,8,RW,,,,RSVD3,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w8,,8,RW,,,,ZS_c_i_m1_04,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w8,,8,RW,,,,ZS_beta_m1_04,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w9,,8,RW,,,,ZS_beta_m1_04,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w9,,8,RW,,,,ZS_pass_i_m1_04,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w9,,8,RW,,,,ZS_mask_i_m1_04,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w9,,8,RW,,,,RSVD4,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w10,,8,RW,,,,ZS_c_i_m1_05,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w10,,8,RW,,,,ZS_beta_m1_05,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w11,,8,RW,,,,ZS_beta_m1_05,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w11,,8,RW,,,,ZS_pass_i_m1_05,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w11,,8,RW,,,,ZS_mask_i_m1_05,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w11,,8,RW,,,,RSVD5,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w12,,8,RW,,,,ZS_c_i_m1_06,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w12,,8,RW,,,,ZS_beta_m1_06,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w13,,8,RW,,,,ZS_beta_m1_06,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w13,,8,RW,,,,ZS_pass_i_m1_06,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w13,,8,RW,,,,ZS_mask_i_m1_06,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w13,,8,RW,,,,RSVD6,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w14,,8,RW,,,,ZS_c_i_m1_07,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w14,,8,RW,,,,ZS_beta_m1_07,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w15,,8,RW,,,,ZS_beta_m1_07,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w15,,8,RW,,,,ZS_pass_i_m1_07,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w15,,8,RW,,,,ZS_mask_i_m1_07,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w15,,8,RW,,,,RSVD7,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w16,,8,RW,,,,ZS_c_i_m1_08,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w16,,8,RW,,,,ZS_beta_m1_08,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w17,,8,RW,,,,ZS_beta_m1_08,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w17,,8,RW,,,,ZS_pass_i_m1_08,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w17,,8,RW,,,,ZS_mask_i_m1_08,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w17,,8,RW,,,,RSVD8,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w18,,8,RW,,,,ZS_c_i_m1_09,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w18,,8,RW,,,,ZS_beta_m1_09,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w19,,8,RW,,,,ZS_beta_m1_09,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w19,,8,RW,,,,ZS_pass_i_m1_09,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w19,,8,RW,,,,ZS_mask_i_m1_09,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w19,,8,RW,,,,RSVD9,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w20,,8,RW,,,,ZS_c_i_m1_10,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w20,,8,RW,,,,ZS_beta_m1_10,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w21,,8,RW,,,,ZS_beta_m1_10,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w21,,8,RW,,,,ZS_pass_i_m1_10,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w21,,8,RW,,,,ZS_mask_i_m1_10,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w21,,8,RW,,,,RSVD10,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w22,,8,RW,,,,ZS_c_i_m1_11,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w22,,8,RW,,,,ZS_beta_m1_11,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w23,,8,RW,,,,ZS_beta_m1_11,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w23,,8,RW,,,,ZS_pass_i_m1_11,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w23,,8,RW,,,,ZS_mask_i_m1_11,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w23,,8,RW,,,,RSVD11,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w24,,8,RW,,,,ZS_c_i_m1_12,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w24,,8,RW,,,,ZS_beta_m1_12,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w25,,8,RW,,,,ZS_beta_m1_12,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w25,,8,RW,,,,ZS_pass_i_m1_12,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w25,,8,RW,,,,ZS_mask_i_m1_12,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w25,,8,RW,,,,RSVD12,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w26,,8,RW,,,,ZS_c_i_m1_13,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w26,,8,RW,,,,ZS_beta_m1_13,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w27,,8,RW,,,,ZS_beta_m1_13,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w27,,8,RW,,,,ZS_pass_i_m1_13,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w27,,8,RW,,,,ZS_mask_i_m1_13,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w27,,8,RW,,,,RSVD13,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w28,,8,RW,,,,ZS_c_i_m1_14,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w28,,8,RW,,,,ZS_beta_m1_14,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w29,,8,RW,,,,ZS_beta_m1_14,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w29,,8,RW,,,,ZS_pass_i_m1_14,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w29,,8,RW,,,,ZS_mask_i_m1_14,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w29,,8,RW,,,,RSVD14,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w30,,8,RW,,,,ZS_c_i_m1_15,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w30,,8,RW,,,,ZS_beta_m1_15,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w31,,8,RW,,,,ZS_beta_m1_15,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w31,,8,RW,,,,ZS_pass_i_m1_15,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w31,,8,RW,,,,ZS_mask_i_m1_15,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w31,,8,RW,,,,RSVD15,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w32,,8,RW,,,,ZS_c_i_m1_16,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w32,,8,RW,,,,ZS_beta_m1_16,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w33,,8,RW,,,,ZS_beta_m1_16,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w33,,8,RW,,,,ZS_pass_i_m1_16,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w33,,8,RW,,,,ZS_mask_i_m1_16,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w33,,8,RW,,,,RSVD16,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w34,,8,RW,,,,ZS_c_i_m1_17,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w34,,8,RW,,,,ZS_beta_m1_17,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w35,,8,RW,,,,ZS_beta_m1_17,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w35,,8,RW,,,,ZS_pass_i_m1_17,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w35,,8,RW,,,,ZS_mask_i_m1_17,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w35,,8,RW,,,,RSVD17,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w36,,8,RW,,,,ZS_c_i_m1_18,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w36,,8,RW,,,,ZS_beta_m1_18,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w37,,8,RW,,,,ZS_beta_m1_18,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w37,,8,RW,,,,ZS_pass_i_m1_18,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w37,,8,RW,,,,ZS_mask_i_m1_18,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w37,,8,RW,,,,RSVD18,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w38,,8,RW,,,,ZS_c_i_m1_19,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w38,,8,RW,,,,ZS_beta_m1_19,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w39,,8,RW,,,,ZS_beta_m1_19,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w39,,8,RW,,,,ZS_pass_i_m1_19,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w39,,8,RW,,,,ZS_mask_i_m1_19,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w39,,8,RW,,,,RSVD19,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w40,,8,RW,,,,ZS_c_i_m1_20,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w40,,8,RW,,,,ZS_beta_m1_20,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w41,,8,RW,,,,ZS_beta_m1_20,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w41,,8,RW,,,,ZS_pass_i_m1_20,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w41,,8,RW,,,,ZS_mask_i_m1_20,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w41,,8,RW,,,,RSVD20,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w42,,8,RW,,,,ZS_c_i_m1_21,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w42,,8,RW,,,,ZS_beta_m1_21,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w43,,8,RW,,,,ZS_beta_m1_21,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w43,,8,RW,,,,ZS_pass_i_m1_21,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w43,,8,RW,,,,ZS_mask_i_m1_21,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w43,,8,RW,,,,RSVD21,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w44,,8,RW,,,,ZS_c_i_m1_22,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w44,,8,RW,,,,ZS_beta_m1_22,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w45,,8,RW,,,,ZS_beta_m1_22,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w45,,8,RW,,,,ZS_pass_i_m1_22,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w45,,8,RW,,,,ZS_mask_i_m1_22,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w45,,8,RW,,,,RSVD22,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w46,,8,RW,,,,ZS_c_i_m1_23,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w46,,8,RW,,,,ZS_beta_m1_23,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w47,,8,RW,,,,ZS_beta_m1_23,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w47,,8,RW,,,,ZS_pass_i_m1_23,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w47,,8,RW,,,,ZS_mask_i_m1_23,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w47,,8,RW,,,,RSVD23,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w48,,8,RW,,,,ZS_c_i_m1_24,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w48,,8,RW,,,,ZS_beta_m1_24,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w49,,8,RW,,,,ZS_beta_m1_24,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w49,,8,RW,,,,ZS_pass_i_m1_24,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w49,,8,RW,,,,ZS_mask_i_m1_24,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w49,,8,RW,,,,RSVD24,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w50,,8,RW,,,,ZS_c_i_m1_25,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w50,,8,RW,,,,ZS_beta_m1_25,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w51,,8,RW,,,,ZS_beta_m1_25,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w51,,8,RW,,,,ZS_pass_i_m1_25,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w51,,8,RW,,,,ZS_mask_i_m1_25,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w51,,8,RW,,,,RSVD25,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w52,,8,RW,,,,ZS_c_i_m1_26,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w52,,8,RW,,,,ZS_beta_m1_26,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w53,,8,RW,,,,ZS_beta_m1_26,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w53,,8,RW,,,,ZS_pass_i_m1_26,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w53,,8,RW,,,,ZS_mask_i_m1_26,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w53,,8,RW,,,,RSVD26,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w54,,8,RW,,,,ZS_c_i_m1_27,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w54,,8,RW,,,,ZS_beta_m1_27,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w55,,8,RW,,,,ZS_beta_m1_27,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w55,,8,RW,,,,ZS_pass_i_m1_27,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w55,,8,RW,,,,ZS_mask_i_m1_27,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w55,,8,RW,,,,RSVD27,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w56,,8,RW,,,,ZS_c_i_m1_28,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w56,,8,RW,,,,ZS_beta_m1_28,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w57,,8,RW,,,,ZS_beta_m1_28,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w57,,8,RW,,,,ZS_pass_i_m1_28,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w57,,8,RW,,,,ZS_mask_i_m1_28,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w57,,8,RW,,,,RSVD28,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w58,,8,RW,,,,ZS_c_i_m1_29,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w58,,8,RW,,,,ZS_beta_m1_29,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w59,,8,RW,,,,ZS_beta_m1_29,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w59,,8,RW,,,,ZS_pass_i_m1_29,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w59,,8,RW,,,,ZS_mask_i_m1_29,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w59,,8,RW,,,,RSVD29,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w60,,8,RW,,,,ZS_c_i_m1_30,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w60,,8,RW,,,,ZS_beta_m1_30,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w61,,8,RW,,,,ZS_beta_m1_30,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w61,,8,RW,,,,ZS_pass_i_m1_30,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w61,,8,RW,,,,ZS_mask_i_m1_30,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w61,,8,RW,,,,RSVD30,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w62,,8,RW,,,,ZS_c_i_m1_31,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w62,,8,RW,,,,ZS_beta_m1_31,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w63,,8,RW,,,,ZS_beta_m1_31,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w63,,8,RW,,,,ZS_pass_i_m1_31,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w63,,8,RW,,,,ZS_mask_i_m1_31,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w63,,8,RW,,,,RSVD31,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w64,,8,RW,,,,ZS_c_i_m1_32,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w64,,8,RW,,,,ZS_beta_m1_32,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w65,,8,RW,,,,ZS_beta_m1_32,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w65,,8,RW,,,,ZS_pass_i_m1_32,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w65,,8,RW,,,,ZS_mask_i_m1_32,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w65,,8,RW,,,,RSVD32,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w66,,8,RW,,,,ZS_c_i_m1_33,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w66,,8,RW,,,,ZS_beta_m1_33,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w67,,8,RW,,,,ZS_beta_m1_33,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w67,,8,RW,,,,ZS_pass_i_m1_33,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w67,,8,RW,,,,ZS_mask_i_m1_33,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w67,,8,RW,,,,RSVD33,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w68,,8,RW,,,,ZS_c_i_m1_34,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w68,,8,RW,,,,ZS_beta_m1_34,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w69,,8,RW,,,,ZS_beta_m1_34,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w69,,8,RW,,,,ZS_pass_i_m1_34,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w69,,8,RW,,,,ZS_mask_i_m1_34,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w69,,8,RW,,,,RSVD34,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w70,,8,RW,,,,ZS_c_i_m1_35,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w70,,8,RW,,,,ZS_beta_m1_35,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w71,,8,RW,,,,ZS_beta_m1_35,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w71,,8,RW,,,,ZS_pass_i_m1_35,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w71,,8,RW,,,,ZS_mask_i_m1_35,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w71,,8,RW,,,,RSVD35,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w72,,8,RW,,,,ZS_c_i_m1_36,0,4,,0xf,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w72,,8,RW,,,,ZS_beta_m1_36,4,4,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w73,,8,RW,,,,ZS_beta_m1_36,0,3,,0x2,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w73,,8,RW,,,,ZS_pass_i_m1_36,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w73,,8,RW,,,,ZS_mask_i_m1_36,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_ZERO_SUPPRESS_M1_xx_ALL_w73,,8,RW,,,,RSVD36,5,3,,0x0,FALSE,TRUE,FALSE,,,
RO_ZERO_SUPPRESS_M1_ALL_w0,,8,RO,,,,tmr_err_cnt_zero_suppress_m1,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
WO_WATCHDOG_ALL_w0,,8,WO,,,,Req_Clear,0,1,,0x0,TRUE,FALSE,FALSE,,,Slow control command to clear reset requests and watchdog histories. Pulsed register.
WO_WATCHDOG_ALL_w0,,8,WO,,,,Cap_Clear,1,1,,0x0,TRUE,FALSE,FALSE,,,Slow control command to clear shadow snapshot of watchdog events. Pulsed register.
WO_WATCHDOG_ALL_w0,,8,WO,,,,Capture,2,1,,0x0,TRUE,FALSE,FALSE,,,Slow control command to capture shadow snapshot of watchdog events. Pulsed register.
WO_WATCHDOG_ALL_w0,,8,WO,,,,RSVD0,3,5,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w0,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w1,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w2,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w3,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w4,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w5,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w6,,8,RW,,,,RstReq_A,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w7,,8,RW,,,,RstReq_A,0,2,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_A. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w7,,8,RW,,,,RSVD0,2,6,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w8,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w9,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w10,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w11,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w12,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w13,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w14,,8,RW,,,,RstReq_B,0,8,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w15,,8,RW,,,,RstReq_B,0,2,,0x0,TRUE,FALSE,FALSE,,,58-bit vector selecting each watchdog contributing to RstReq_B. Each i-th bit indicates if the i-th watchdog contributes (==1) or not (==0) to the reset request. 0: packet veto; 1: event EBO reconstruction failure (=10) or ambiguous (=11); 2: event header-trailer reconstruction failure (=10) or ambiguous (=11); 3: ECON HGCROC match; 4: event unexpected; 16:5: SPH Hamming for eRX 11:0; 28:17: SPH CRC for eRX 11:0; 40:29: SPH EBO for eRX 11:0; 52:41: SPH header-trailer for eRX 11:0; 53: ROCDAQCTRL bad bunch counter value(==0 or >3564); 54: ROCDAQCTRL unused state; 55: ROCDAQCTRL possible lost packet; 56: ROCDAQCTRL predictor FIFO full; 57: ROCDAQCTRL L1A FIFO full.
RW_WATCHDOG_ALL_w15,,8,RW,,,,RSVD1,2,6,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w16,,8,RW,,,,Clearing_FCmd_Ctrl,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which fast commands contribute to the watchdog clear. Each bit controls one fast command (0:BCR; 1:OCR; 2:L1A; 3:NZS; 4:EBR; 5:ECR; 6:LRST; 7:SPARE_0).
RW_WATCHDOG_ALL_w17,,8,RW,,,,Limit_Packet_Veto,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which algorithm will result in an alert for this watchdog. Each bit controls one algorithm (0:any one; 1:two in a row; 2:four in a row; 3:eight in a row; 4:thirty-two in a row; 5:any eight or more in the last thirty-two; 6:any sixteen or more in the last thirty-two; 7:any twenty-four or more in the last thirty-two).
RW_WATCHDOG_ALL_w18,,8,RW,,,,Limit_Event_Unexpected,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which algorithm will result in an alert for this watchdog. Each bit controls one algorithm (0:any one; 1:two in a row; 2:four in a row; 3:eight in a row; 4:thirty-two in a row; 5:any eight or more in the last thirty-two; 6:any sixteen or more in the last thirty-two; 7:any twenty-four or more in the last thirty-two).
RW_WATCHDOG_ALL_w19,,8,RW,,,,Limit_Event_E_H_Match,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which algorithm will result in an alert for this watchdog. Each bit controls one algorithm (0:any one; 1:two in a row; 2:four in a row; 3:eight in a row; 4:thirty-two in a row; 5:any eight or more in the last thirty-two; 6:any sixteen or more in the last thirty-two; 7:any twenty-four or more in the last thirty-two).
RW_WATCHDOG_ALL_w20,,8,RW,,,,Limit_Event_HT_Recon,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which algorithm will result in an alert for this watchdog. Each bit controls one algorithm (0:any one; 1:two in a row; 2:four in a row; 3:eight in a row; 4:thirty-two in a row; 5:any eight or more in the last thirty-two; 6:any sixteen or more in the last thirty-two; 7:any twenty-four or more in the last thirty-two).
RW_WATCHDOG_ALL_w21,,8,RW,,,,Limit_Event_EBO_Recon,0,8,,0x0,TRUE,FALSE,FALSE,,,vector of active-high signals indicating which algorithm will result in an alert for this watchdog. Each bit controls one algorithm (0:any one; 1:two in a row; 2:four in a row; 3:eight in a row; 4:thirty-two in a row; 5:any eight or more in the last thirty-two; 6:any sixteen or more in the last thirty-two; 7:any twenty-four or more in the last thirty-two).
RW_WATCHDOG_ALL_w22,,8,RW,,,,Enable_Packet_Veto,0,1,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Packet Veto watchdog alert and reset request [1: enable; 0: disable].
RW_WATCHDOG_ALL_w22,,8,RW,,,,Enable_Event_Unexpected,1,1,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Unexpected Event watchdog alert and reset request [1: enable; 0: disable].
RW_WATCHDOG_ALL_w22,,8,RW,,,,Enable_Event_E_H_Match,2,1,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a ECON-vs-HGCROC mismatch watchdog alert and reset request [1: enable; 0: disable].
RW_WATCHDOG_ALL_w22,,8,RW,,,,Enable_Event_HT_Recon,3,1,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Header-Trailer reconstruction failure watchdog alert and reset request [1: enable; 0: disable].
RW_WATCHDOG_ALL_w22,,8,RW,,,,Enable_Event_EBO_Recon,4,1,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Event-Bunch-Orbit reconstruction failure watchdog alert and reset request [1: enable; 0: disable].
RW_WATCHDOG_ALL_w22,,8,RW,,,,RSVD2,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w23,,8,RW,,,,Limit_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w24,,8,RW,,,,Limit_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w25,,8,RW,,,,Limit_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w26,,8,RW,,,,Limit_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w27,,8,RW,,,,Limit_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,Enable_ROC_BunchCounter,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,Enable_ROC_UnusedState,1,1,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,Enable_ROC_MissedPkt,2,1,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,Enable_ROC_PredictorFIFOfull,3,1,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,Enable_ROC_L1AFIFO_full,4,1,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w28,,8,RW,,,,RSVD3,5,3,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w29,,8,RW,,,,Limit_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w30,,8,RW,,,,Limit_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w31,,8,RW,,,,Limit_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w32,,8,RW,,,,Limit_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w33,,8,RW,,,,Limit_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w34,,8,RW,,,,Limit_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w35,,8,RW,,,,Limit_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w36,,8,RW,,,,Limit_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w37,,8,RW,,,,Limit_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w38,,8,RW,,,,Limit_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w39,,8,RW,,,,Limit_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w40,,8,RW,,,,Limit_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w41,,8,RW,,,,Enable_eRXxx_Ham,0,8,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet Hamming watchdog alert and reset request
RW_WATCHDOG_ALL_w42,,8,RW,,,,Enable_eRXxx_Ham,0,4,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet Hamming watchdog alert and reset request
RW_WATCHDOG_ALL_w42,,8,RW,,,,RSVD4,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w43,,8,RW,,,,Limit_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w44,,8,RW,,,,Limit_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w45,,8,RW,,,,Limit_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w46,,8,RW,,,,Limit_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w47,,8,RW,,,,Limit_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w48,,8,RW,,,,Limit_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w49,,8,RW,,,,Limit_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w50,,8,RW,,,,Limit_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w51,,8,RW,,,,Limit_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w52,,8,RW,,,,Limit_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w53,,8,RW,,,,Limit_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w54,,8,RW,,,,Limit_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w55,,8,RW,,,,Enable_eRXxx_SubP_CRC,0,8,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet CRC matching watchdog alert and reset request
RW_WATCHDOG_ALL_w56,,8,RW,,,,Enable_eRXxx_SubP_CRC,0,4,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet CRC matching watchdog alert and reset request
RW_WATCHDOG_ALL_w56,,8,RW,,,,RSVD5,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w57,,8,RW,,,,Limit_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w58,,8,RW,,,,Limit_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w59,,8,RW,,,,Limit_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w60,,8,RW,,,,Limit_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w61,,8,RW,,,,Limit_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w62,,8,RW,,,,Limit_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w63,,8,RW,,,,Limit_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w64,,8,RW,,,,Limit_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w65,,8,RW,,,,Limit_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w66,,8,RW,,,,Limit_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w67,,8,RW,,,,Limit_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w68,,8,RW,,,,Limit_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w69,,8,RW,,,,Enable_eRXxx_SubP_EBO,0,8,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet EBO matching watchdog alert and reset request
RW_WATCHDOG_ALL_w70,,8,RW,,,,Enable_eRXxx_SubP_EBO,0,4,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet EBO matching watchdog alert and reset request
RW_WATCHDOG_ALL_w70,,8,RW,,,,RSVD6,4,4,,0x0,FALSE,TRUE,FALSE,,,
RW_WATCHDOG_ALL_w71,,8,RW,,,,Limit_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w72,,8,RW,,,,Limit_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w73,,8,RW,,,,Limit_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w74,,8,RW,,,,Limit_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w75,,8,RW,,,,Limit_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w76,,8,RW,,,,Limit_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w77,,8,RW,,,,Limit_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w78,,8,RW,,,,Limit_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w79,,8,RW,,,,Limit_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w80,,8,RW,,,,Limit_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w81,,8,RW,,,,Limit_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w82,,8,RW,,,,Limit_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,FALSE,,,
RW_WATCHDOG_ALL_w83,,8,RW,,,,Enable_eRXxx_SubP_HT,0,8,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet HT matching watchdog alert and reset request
RW_WATCHDOG_ALL_w84,,8,RW,,,,Enable_eRXxx_SubP_HT,0,4,,0x0,TRUE,FALSE,FALSE,,,1-bit enabling a Sub-packet HT matching watchdog alert and reset request
RW_WATCHDOG_ALL_w84,,8,RW,,,,RSVD7,4,4,,0x0,FALSE,TRUE,FALSE,,,
RO_WATCHDOG_SP_w0,,8,RO,,,,eRXxx_status_00,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w0,,8,RO,,,,eRXxx_status_01,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w1,,8,RO,,,,eRXxx_status_02,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w1,,8,RO,,,,eRXxx_status_03,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w2,,8,RO,,,,eRXxx_status_04,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w2,,8,RO,,,,eRXxx_status_05,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w3,,8,RO,,,,eRXxx_status_06,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w3,,8,RO,,,,eRXxx_status_07,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w4,,8,RO,,,,eRXxx_status_08,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w4,,8,RO,,,,eRXxx_status_09,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w5,,8,RO,,,,eRXxx_status_10,0,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w5,,8,RO,,,,eRXxx_status_11,4,4,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w6,,8,RO,,,,event_status,0,5,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 5-bit per eRX indicating watchdogs for (bit 4)Unexpected/(bit 3)E-H Match/(bit 2)EBO recon/(bit 2)HT recon/(bit 1)Packet Veto
RO_WATCHDOG_SP_w6,,8,RO,,,,roc_daq,5,3,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w7,,8,RO,,,,roc_daq,0,2,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SP_w7,,8,RO,,,,RSVD0,2,6,,0x0,FALSE,TRUE,TRUE,,,
RO_WATCHDOG_SP_w8,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w9,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w10,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w11,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w12,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w13,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w14,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_SP_w15,,8,RO,,,,Persistent,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) 53-bit state of all watchdogs
RO_WATCHDOG_HAM_w0,,8,RO,,,,Count_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w1,,8,RO,,,,Count_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w2,,8,RO,,,,Count_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w3,,8,RO,,,,Count_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w4,,8,RO,,,,Count_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w5,,8,RO,,,,Count_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w6,,8,RO,,,,Count_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w7,,8,RO,,,,Count_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w8,,8,RO,,,,Count_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w9,,8,RO,,,,Count_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w10,,8,RO,,,,Count_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w11,,8,RO,,,,Count_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w12,,8,RO,,,,Count_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w13,,8,RO,,,,Count_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w14,,8,RO,,,,Count_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w15,,8,RO,,,,Count_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w16,,8,RO,,,,Count_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w17,,8,RO,,,,Count_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w18,,8,RO,,,,Count_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w19,,8,RO,,,,Count_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w20,,8,RO,,,,Count_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w21,,8,RO,,,,Count_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w22,,8,RO,,,,Count_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w23,,8,RO,,,,Count_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w24,,8,RO,,,,History_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w25,,8,RO,,,,History_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w26,,8,RO,,,,History_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w27,,8,RO,,,,History_eRXxx_Ham_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w28,,8,RO,,,,History_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w29,,8,RO,,,,History_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w30,,8,RO,,,,History_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w31,,8,RO,,,,History_eRXxx_Ham_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w32,,8,RO,,,,History_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w33,,8,RO,,,,History_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w34,,8,RO,,,,History_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w35,,8,RO,,,,History_eRXxx_Ham_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w36,,8,RO,,,,History_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w37,,8,RO,,,,History_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w38,,8,RO,,,,History_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w39,,8,RO,,,,History_eRXxx_Ham_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w40,,8,RO,,,,History_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w41,,8,RO,,,,History_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w42,,8,RO,,,,History_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w43,,8,RO,,,,History_eRXxx_Ham_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w44,,8,RO,,,,History_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w45,,8,RO,,,,History_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w46,,8,RO,,,,History_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w47,,8,RO,,,,History_eRXxx_Ham_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w48,,8,RO,,,,History_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w49,,8,RO,,,,History_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w50,,8,RO,,,,History_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w51,,8,RO,,,,History_eRXxx_Ham_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w52,,8,RO,,,,History_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w53,,8,RO,,,,History_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w54,,8,RO,,,,History_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w55,,8,RO,,,,History_eRXxx_Ham_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w56,,8,RO,,,,History_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w57,,8,RO,,,,History_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w58,,8,RO,,,,History_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w59,,8,RO,,,,History_eRXxx_Ham_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w60,,8,RO,,,,History_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w61,,8,RO,,,,History_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w62,,8,RO,,,,History_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w63,,8,RO,,,,History_eRXxx_Ham_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w64,,8,RO,,,,History_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w65,,8,RO,,,,History_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w66,,8,RO,,,,History_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w67,,8,RO,,,,History_eRXxx_Ham_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w68,,8,RO,,,,History_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w69,,8,RO,,,,History_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w70,,8,RO,,,,History_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_HAM_w71,,8,RO,,,,History_eRXxx_Ham_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w0,,8,RO,,,,Count_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w1,,8,RO,,,,Count_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w2,,8,RO,,,,Count_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w3,,8,RO,,,,Count_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w4,,8,RO,,,,Count_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w5,,8,RO,,,,Count_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w6,,8,RO,,,,Count_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w7,,8,RO,,,,Count_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w8,,8,RO,,,,Count_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w9,,8,RO,,,,Count_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w10,,8,RO,,,,Count_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w11,,8,RO,,,,Count_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w12,,8,RO,,,,Count_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w13,,8,RO,,,,Count_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w14,,8,RO,,,,Count_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w15,,8,RO,,,,Count_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w16,,8,RO,,,,Count_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w17,,8,RO,,,,Count_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w18,,8,RO,,,,Count_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w19,,8,RO,,,,Count_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w20,,8,RO,,,,Count_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w21,,8,RO,,,,Count_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w22,,8,RO,,,,Count_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w23,,8,RO,,,,Count_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w24,,8,RO,,,,History_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w25,,8,RO,,,,History_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w26,,8,RO,,,,History_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w27,,8,RO,,,,History_eRXxx_SubP_CRC_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w28,,8,RO,,,,History_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w29,,8,RO,,,,History_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w30,,8,RO,,,,History_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w31,,8,RO,,,,History_eRXxx_SubP_CRC_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w32,,8,RO,,,,History_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w33,,8,RO,,,,History_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w34,,8,RO,,,,History_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w35,,8,RO,,,,History_eRXxx_SubP_CRC_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w36,,8,RO,,,,History_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w37,,8,RO,,,,History_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w38,,8,RO,,,,History_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w39,,8,RO,,,,History_eRXxx_SubP_CRC_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w40,,8,RO,,,,History_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w41,,8,RO,,,,History_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w42,,8,RO,,,,History_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w43,,8,RO,,,,History_eRXxx_SubP_CRC_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w44,,8,RO,,,,History_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w45,,8,RO,,,,History_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w46,,8,RO,,,,History_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w47,,8,RO,,,,History_eRXxx_SubP_CRC_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w48,,8,RO,,,,History_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w49,,8,RO,,,,History_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w50,,8,RO,,,,History_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w51,,8,RO,,,,History_eRXxx_SubP_CRC_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w52,,8,RO,,,,History_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w53,,8,RO,,,,History_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w54,,8,RO,,,,History_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w55,,8,RO,,,,History_eRXxx_SubP_CRC_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w56,,8,RO,,,,History_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w57,,8,RO,,,,History_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w58,,8,RO,,,,History_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w59,,8,RO,,,,History_eRXxx_SubP_CRC_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w60,,8,RO,,,,History_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w61,,8,RO,,,,History_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w62,,8,RO,,,,History_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w63,,8,RO,,,,History_eRXxx_SubP_CRC_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w64,,8,RO,,,,History_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w65,,8,RO,,,,History_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w66,,8,RO,,,,History_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w67,,8,RO,,,,History_eRXxx_SubP_CRC_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w68,,8,RO,,,,History_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w69,,8,RO,,,,History_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w70,,8,RO,,,,History_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_CRC_w71,,8,RO,,,,History_eRXxx_SubP_CRC_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w0,,8,RO,,,,Count_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w1,,8,RO,,,,Count_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w2,,8,RO,,,,Count_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w3,,8,RO,,,,Count_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w4,,8,RO,,,,Count_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w5,,8,RO,,,,Count_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w6,,8,RO,,,,Count_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w7,,8,RO,,,,Count_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w8,,8,RO,,,,Count_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w9,,8,RO,,,,Count_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w10,,8,RO,,,,Count_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w11,,8,RO,,,,Count_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w12,,8,RO,,,,Count_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w13,,8,RO,,,,Count_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w14,,8,RO,,,,Count_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w15,,8,RO,,,,Count_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w16,,8,RO,,,,Count_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w17,,8,RO,,,,Count_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w18,,8,RO,,,,Count_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w19,,8,RO,,,,Count_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w20,,8,RO,,,,Count_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w21,,8,RO,,,,Count_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w22,,8,RO,,,,Count_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w23,,8,RO,,,,Count_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w24,,8,RO,,,,History_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w25,,8,RO,,,,History_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w26,,8,RO,,,,History_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w27,,8,RO,,,,History_eRXxx_SubP_EBO_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w28,,8,RO,,,,History_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w29,,8,RO,,,,History_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w30,,8,RO,,,,History_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w31,,8,RO,,,,History_eRXxx_SubP_EBO_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w32,,8,RO,,,,History_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w33,,8,RO,,,,History_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w34,,8,RO,,,,History_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w35,,8,RO,,,,History_eRXxx_SubP_EBO_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w36,,8,RO,,,,History_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w37,,8,RO,,,,History_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w38,,8,RO,,,,History_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w39,,8,RO,,,,History_eRXxx_SubP_EBO_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w40,,8,RO,,,,History_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w41,,8,RO,,,,History_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w42,,8,RO,,,,History_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w43,,8,RO,,,,History_eRXxx_SubP_EBO_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w44,,8,RO,,,,History_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w45,,8,RO,,,,History_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w46,,8,RO,,,,History_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w47,,8,RO,,,,History_eRXxx_SubP_EBO_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w48,,8,RO,,,,History_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w49,,8,RO,,,,History_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w50,,8,RO,,,,History_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w51,,8,RO,,,,History_eRXxx_SubP_EBO_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w52,,8,RO,,,,History_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w53,,8,RO,,,,History_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w54,,8,RO,,,,History_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w55,,8,RO,,,,History_eRXxx_SubP_EBO_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w56,,8,RO,,,,History_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w57,,8,RO,,,,History_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w58,,8,RO,,,,History_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w59,,8,RO,,,,History_eRXxx_SubP_EBO_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w60,,8,RO,,,,History_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w61,,8,RO,,,,History_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w62,,8,RO,,,,History_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w63,,8,RO,,,,History_eRXxx_SubP_EBO_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w64,,8,RO,,,,History_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w65,,8,RO,,,,History_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w66,,8,RO,,,,History_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w67,,8,RO,,,,History_eRXxx_SubP_EBO_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w68,,8,RO,,,,History_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w69,,8,RO,,,,History_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w70,,8,RO,,,,History_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_EBO_w71,,8,RO,,,,History_eRXxx_SubP_EBO_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w0,,8,RO,,,,Count_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w1,,8,RO,,,,Count_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w2,,8,RO,,,,Count_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w3,,8,RO,,,,Count_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w4,,8,RO,,,,Count_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w5,,8,RO,,,,Count_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w6,,8,RO,,,,Count_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w7,,8,RO,,,,Count_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w8,,8,RO,,,,Count_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w9,,8,RO,,,,Count_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w10,,8,RO,,,,Count_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w11,,8,RO,,,,Count_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w12,,8,RO,,,,Count_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w13,,8,RO,,,,Count_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w14,,8,RO,,,,Count_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w15,,8,RO,,,,Count_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w16,,8,RO,,,,Count_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w17,,8,RO,,,,Count_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w18,,8,RO,,,,Count_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w19,,8,RO,,,,Count_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w20,,8,RO,,,,Count_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w21,,8,RO,,,,Count_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w22,,8,RO,,,,Count_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w23,,8,RO,,,,Count_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w24,,8,RO,,,,History_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w25,,8,RO,,,,History_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w26,,8,RO,,,,History_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w27,,8,RO,,,,History_eRXxx_SubP_HT_00,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w28,,8,RO,,,,History_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w29,,8,RO,,,,History_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w30,,8,RO,,,,History_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w31,,8,RO,,,,History_eRXxx_SubP_HT_01,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w32,,8,RO,,,,History_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w33,,8,RO,,,,History_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w34,,8,RO,,,,History_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w35,,8,RO,,,,History_eRXxx_SubP_HT_02,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w36,,8,RO,,,,History_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w37,,8,RO,,,,History_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w38,,8,RO,,,,History_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w39,,8,RO,,,,History_eRXxx_SubP_HT_03,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w40,,8,RO,,,,History_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w41,,8,RO,,,,History_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w42,,8,RO,,,,History_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w43,,8,RO,,,,History_eRXxx_SubP_HT_04,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w44,,8,RO,,,,History_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w45,,8,RO,,,,History_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w46,,8,RO,,,,History_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w47,,8,RO,,,,History_eRXxx_SubP_HT_05,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w48,,8,RO,,,,History_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w49,,8,RO,,,,History_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w50,,8,RO,,,,History_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w51,,8,RO,,,,History_eRXxx_SubP_HT_06,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w52,,8,RO,,,,History_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w53,,8,RO,,,,History_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w54,,8,RO,,,,History_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w55,,8,RO,,,,History_eRXxx_SubP_HT_07,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w56,,8,RO,,,,History_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w57,,8,RO,,,,History_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w58,,8,RO,,,,History_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w59,,8,RO,,,,History_eRXxx_SubP_HT_08,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w60,,8,RO,,,,History_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w61,,8,RO,,,,History_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w62,,8,RO,,,,History_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w63,,8,RO,,,,History_eRXxx_SubP_HT_09,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w64,,8,RO,,,,History_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w65,,8,RO,,,,History_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w66,,8,RO,,,,History_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w67,,8,RO,,,,History_eRXxx_SubP_HT_10,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w68,,8,RO,,,,History_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w69,,8,RO,,,,History_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w70,,8,RO,,,,History_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_SUBP_HT_w71,,8,RO,,,,History_eRXxx_SubP_HT_11,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w0,,8,RO,,,,Count_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing Packet Veto watchdogs
RO_WATCHDOG_MISC_w1,,8,RO,,,,Count_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing Packet Veto watchdogs
RO_WATCHDOG_MISC_w2,,8,RO,,,,Count_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing Unexpected event watchdog
RO_WATCHDOG_MISC_w3,,8,RO,,,,Count_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing Unexpected event watchdog
RO_WATCHDOG_MISC_w4,,8,RO,,,,Count_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing ECON vs HGCROC Mismatch watchdogs
RO_WATCHDOG_MISC_w5,,8,RO,,,,Count_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing ECON vs HGCROC Mismatch watchdogs
RO_WATCHDOG_MISC_w6,,8,RO,,,,Count_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing HT Reconstruction watchdogs
RO_WATCHDOG_MISC_w7,,8,RO,,,,Count_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing HT Reconstruction watchdogs
RO_WATCHDOG_MISC_w8,,8,RO,,,,Count_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing EBO Reconstruction watchdogs
RO_WATCHDOG_MISC_w9,,8,RO,,,,Count_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) count of packets causing EBO Reconstruction watchdogs
RO_WATCHDOG_MISC_w10,,8,RO,,,,Count_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w11,,8,RO,,,,Count_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w12,,8,RO,,,,Count_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w13,,8,RO,,,,Count_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w14,,8,RO,,,,Count_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w15,,8,RO,,,,Count_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w16,,8,RO,,,,Count_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w17,,8,RO,,,,Count_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w18,,8,RO,,,,Count_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w19,,8,RO,,,,Count_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w20,,8,RO,,,,History_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Packet Veto watchdogs over last 32 packets
RO_WATCHDOG_MISC_w21,,8,RO,,,,History_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Packet Veto watchdogs over last 32 packets
RO_WATCHDOG_MISC_w22,,8,RO,,,,History_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Packet Veto watchdogs over last 32 packets
RO_WATCHDOG_MISC_w23,,8,RO,,,,History_Packet_Veto,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Packet Veto watchdogs over last 32 packets
RO_WATCHDOG_MISC_w24,,8,RO,,,,History_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Unexpected event watchdogs over last 32 packets
RO_WATCHDOG_MISC_w25,,8,RO,,,,History_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Unexpected event watchdogs over last 32 packets
RO_WATCHDOG_MISC_w26,,8,RO,,,,History_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Unexpected event watchdogs over last 32 packets
RO_WATCHDOG_MISC_w27,,8,RO,,,,History_Event_Unexpected,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history Unexpected event watchdogs over last 32 packets
RO_WATCHDOG_MISC_w28,,8,RO,,,,History_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history ECON vs HGCROC Mismatch watchdogs over last 32 packets
RO_WATCHDOG_MISC_w29,,8,RO,,,,History_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history ECON vs HGCROC Mismatch watchdogs over last 32 packets
RO_WATCHDOG_MISC_w30,,8,RO,,,,History_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history ECON vs HGCROC Mismatch watchdogs over last 32 packets
RO_WATCHDOG_MISC_w31,,8,RO,,,,History_E_H_Match,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history ECON vs HGCROC Mismatch watchdogs over last 32 packets
RO_WATCHDOG_MISC_w32,,8,RO,,,,History_LSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w33,,8,RO,,,,History_LSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w34,,8,RO,,,,History_LSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w35,,8,RO,,,,History_LSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w36,,8,RO,,,,History_MSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w37,,8,RO,,,,History_MSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w38,,8,RO,,,,History_MSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w39,,8,RO,,,,History_MSB_HT_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of HT Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w40,,8,RO,,,,History_LSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w41,,8,RO,,,,History_LSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w42,,8,RO,,,,History_LSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w43,,8,RO,,,,History_LSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of MSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w44,,8,RO,,,,History_MSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w45,,8,RO,,,,History_MSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w46,,8,RO,,,,History_MSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w47,,8,RO,,,,History_MSB_EBO_Recon,0,8,,0x0,TRUE,FALSE,TRUE,,,(Requires I2C_WO_Watchdog_Capture) history of LSB of EBO Reconstructions over last 32 packets
RO_WATCHDOG_MISC_w48,,8,RO,,,,History_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w49,,8,RO,,,,History_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w50,,8,RO,,,,History_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w51,,8,RO,,,,History_ROC_BunchCounter,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w52,,8,RO,,,,History_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w53,,8,RO,,,,History_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w54,,8,RO,,,,History_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w55,,8,RO,,,,History_ROC_UnusedState,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w56,,8,RO,,,,History_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w57,,8,RO,,,,History_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w58,,8,RO,,,,History_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w59,,8,RO,,,,History_ROC_MissedPkt,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w60,,8,RO,,,,History_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w61,,8,RO,,,,History_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w62,,8,RO,,,,History_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w63,,8,RO,,,,History_ROC_PredictorFIFOfull,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w64,,8,RO,,,,History_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w65,,8,RO,,,,History_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w66,,8,RO,,,,History_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w67,,8,RO,,,,History_ROC_L1AFIFO_full,0,8,,0x0,TRUE,FALSE,TRUE,,,
RO_WATCHDOG_MISC_w68,,8,RO,,,,tmr_err_cnt_reset_request,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_FORMATTER_BUFFER_ALL_w0,,8,RW,,,,I2C_RW_ERRIN_mask,0,8,,0x0,TRUE,FALSE,FALSE,,,8-bit mask for I2C_RO_ERRIN: 7 econt - 6:0 roc
RW_FORMATTER_BUFFER_ALL_w1,,8,RW,,,,I2C_RW_Buffer_Status_0,0,8,,0x20,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 0
RW_FORMATTER_BUFFER_ALL_w2,,8,RW,,,,I2C_RW_Buffer_Status_1,0,8,,0x40,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 1 (any value below I2C_RW_Buffer_Status_0 will results in I2C_RW_Buffer_Status_0 being used)
RW_FORMATTER_BUFFER_ALL_w3,,8,RW,,,,I2C_RW_Buffer_Status_2,0,8,,0x60,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 2 (any value below I2C_RW_Buffer_Status_1 will results in I2C_RW_Buffer_Status_1 being used)
RW_FORMATTER_BUFFER_ALL_w4,,8,RW,,,,I2C_RW_Buffer_Status_3,0,8,,0x80,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 3 (any value below I2C_RW_Buffer_Status_2 will results in I2C_RW_Buffer_Status_2 being used)
RW_FORMATTER_BUFFER_ALL_w5,,8,RW,,,,I2C_RW_Buffer_Status_4,0,8,,0xa0,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 4 (any value below I2C_RW_Buffer_Status_3 will results in I2C_RW_Buffer_Status_3 being used)
RW_FORMATTER_BUFFER_ALL_w6,,8,RW,,,,I2C_RW_Buffer_Status_5,0,8,,0xc0,TRUE,FALSE,FALSE,,,8-bit output buffer memory address threshold for Buffer status == 5 (any value below I2C_RW_Buffer_Status_4 will results in I2C_RW_Buffer_Status_4 being used)
RW_FORMATTER_BUFFER_ALL_w7,,8,RW,,,,I2C_RW_Buffer_Status_6,0,8,,0xe0,TRUE,FALSE,FALSE,,,8-bit output buffer truncation assertion threshold and memory address threshold for Buffer status == 6 ( as buffer status any value below I2C_RW_Buffer_Status_5 will results in I2C_RW_Buffer_Status_5 being used - as truncation threshold any value above OB_MIN_WORD_N project constant will results in OB_MIN_WORD_N will be used )
RW_FORMATTER_BUFFER_ALL_w8,,8,RW,,,,I2C_RW_Buffer_Status_truncate_threshold_low,0,8,,0x80,TRUE,FALSE,FALSE,,,8-bit output buffer memory address truncation de-assertion threshold. This value should be either equal to I2C_RW_Buffer_Status_6 (no truncation hysteresis) or smaller than I2C_RW_Buffer_Status_6-41 (truncation hysteresis)
RW_FORMATTER_BUFFER_ALL_w9,,8,RW,,,,I2C_RW_Align_Serializer_0,0,6,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[0]
RW_FORMATTER_BUFFER_ALL_w9,,8,RW,,,,I2C_RW_Align_Serializer_1,6,2,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[1]
RW_FORMATTER_BUFFER_ALL_w10,,8,RW,,,,I2C_RW_Align_Serializer_1,0,4,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[1]
RW_FORMATTER_BUFFER_ALL_w10,,8,RW,,,,I2C_RW_Align_Serializer_2,4,4,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[2]
RW_FORMATTER_BUFFER_ALL_w11,,8,RW,,,,I2C_RW_Align_Serializer_2,0,2,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[2]
RW_FORMATTER_BUFFER_ALL_w11,,8,RW,,,,I2C_RW_Align_Serializer_3,2,6,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[3]
RW_FORMATTER_BUFFER_ALL_w12,,8,RW,,,,I2C_RW_Align_Serializer_4,0,6,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[4]
RW_FORMATTER_BUFFER_ALL_w12,,8,RW,,,,I2C_RW_Align_Serializer_5,6,2,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[5]
RW_FORMATTER_BUFFER_ALL_w13,,8,RW,,,,I2C_RW_Align_Serializer_5,0,4,,0x0,TRUE,FALSE,FALSE,,,6-bit programmable bit-shift at 1.28 GHz for serializer[5]
RW_FORMATTER_BUFFER_ALL_w13,,8,RW,,,,I2C_RW_Link_Reset_Pattern,4,4,,0x2,TRUE,FALSE,FALSE,,,11-bits programmable pattern used during Link_Reset alignment
RW_FORMATTER_BUFFER_ALL_w14,,8,RW,,,,I2C_RW_Link_Reset_Pattern,0,7,,0x12,TRUE,FALSE,FALSE,,,11-bits programmable pattern used during Link_Reset alignment
RW_FORMATTER_BUFFER_ALL_w14,,8,RW,,,,I2C_RW_Idle_Pattern,7,1,,0x1,TRUE,FALSE,FALSE,,,24-bits programmable idle for the output packet
RW_FORMATTER_BUFFER_ALL_w15,,8,RW,,,,I2C_RW_Idle_Pattern,0,8,,0xaa,TRUE,FALSE,FALSE,,,24-bits programmable idle for the output packet
RW_FORMATTER_BUFFER_ALL_w16,,8,RW,,,,I2C_RW_Idle_Pattern,0,8,,0xaa,TRUE,FALSE,FALSE,,,24-bits programmable idle for the output packet
RW_FORMATTER_BUFFER_ALL_w17,,8,RW,,,,I2C_RW_Idle_Pattern,0,7,,0x2a,TRUE,FALSE,FALSE,,,24-bits programmable idle for the output packet
RW_FORMATTER_BUFFER_ALL_w17,,8,RW,,,,I2C_RW_Header_Marker,7,1,,0x0,TRUE,FALSE,FALSE,,,9-bits programmable header for the output packet
RW_FORMATTER_BUFFER_ALL_w18,,8,RW,,,,I2C_RW_Header_Marker,0,8,,0xf3,TRUE,FALSE,FALSE,,,9-bits programmable header for the output packet
RW_FORMATTER_BUFFER_ALL_w19,,8,RW,,,,I2C_RW_Active_eTXs,0,6,,0x3f,TRUE,FALSE,FALSE,,,6-bits active-high enables for serializers
RW_FORMATTER_BUFFER_ALL_w19,,8,RW,,,,I2C_RW_prbs_on,6,1,,0x0,TRUE,FALSE,FALSE,,,1-bit active-high enable for PRBS mode
RW_FORMATTER_BUFFER_ALL_w19,,8,RW,,,,RSVD0,7,1,,0x0,FALSE,TRUE,FALSE,,,
RO_FORMATTER_BUFFER_ALL_w0,,8,RO,,,,I2C_RO_ERRIN_RocError,0,7,,0x0,TRUE,FALSE,TRUE,,,7-bit read-only containing the sampled value of roc error input
RO_FORMATTER_BUFFER_ALL_w0,,8,RO,,,,I2C_RO_ERRIN_EcontError,7,1,,0x0,TRUE,FALSE,TRUE,,,1-bit read-only containing the sampled value of econt error input
RO_FORMATTER_BUFFER_ALL_w1,,8,RO,,,,I2C_RO_OB_BIST_Result_Test1,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for address test
RO_FORMATTER_BUFFER_ALL_w2,,8,RO,,,,I2C_RO_OB_BIST_Result_Test1,0,4,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for address test
RO_FORMATTER_BUFFER_ALL_w2,,8,RO,,,,I2C_RO_OB_BIST_Result_Test2,4,4,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for 5A test
RO_FORMATTER_BUFFER_ALL_w3,,8,RO,,,,I2C_RO_OB_BIST_Result_Test2,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for 5A test
RO_FORMATTER_BUFFER_ALL_w4,,8,RO,,,,I2C_RO_OB_BIST_Result_Test3,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for A5 test
RO_FORMATTER_BUFFER_ALL_w5,,8,RO,,,,I2C_RO_OB_BIST_Result_Test3,0,4,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for A5 test
RO_FORMATTER_BUFFER_ALL_w5,,8,RO,,,,I2C_RO_OB_BIST_Result_Test4,4,4,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for 00 test
RO_FORMATTER_BUFFER_ALL_w6,,8,RO,,,,I2C_RO_OB_BIST_Result_Test4,0,8,,0x0,TRUE,FALSE,TRUE,,,12-bits (one per memory) BIST test results for 00 test
RO_FORMATTER_BUFFER_ALL_w7,,8,RO,,,,I2C_RO_Error_Count_Format,0,8,,0x0,TRUE,FALSE,TRUE,,,Number of times any of the 12 eRXs has a wrong code in byte 0. 8-bit counter. Saturating behaviour. Reset with WO_ROC_DAQ_CTRL_ALL.I2C_WO_Strobes_0_Clear_Status
RO_FORMATTER_BUFFER_ALL_w8,,8,RO,,,,I2C_RO_Error_Count_Hamming,0,8,,0x0,TRUE,FALSE,TRUE,,,Number of times any of the 12 eRXs has Hamming double bit errors in byte 0. 8-bit counter. Saturating behaviour. Reset with WO_ROC_DAQ_CTRL_ALL.I2C_WO_Strobes_0_Clear_Status
RO_FORMATTER_BUFFER_ALL_w9,,8,RO,,,,I2C_RO_Error_Count_PassThru,0,8,,0x0,TRUE,FALSE,TRUE,,,Number of times any of the 12 eRXs has a code not corresponding to passthrough code in byte 0. Only active if the chips is in passthrough mode. 8-bit counter. Saturating behaviour. Reset with WO_ROC_DAQ_CTRL_ALL.I2C_WO_Strobes_0_Clear_Status
RO_FORMATTER_BUFFER_ALL_w10,,8,RO,,,,tmr_err_cnt_formatter_buffer,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
RW_MISC_ALL_w0,,8,RW,,,,misc_rw_0_err_clr,0,1,,0x0,TRUE,FALSE,FALSE,,,
RW_MISC_ALL_w0,,8,RW,,,,RSVD0,1,7,,0x0,FALSE,TRUE,FALSE,,,
RO_MISC_ALL_w0,,8,RO,,,,misc_ro_0,0,8,,0x0,TRUE,FALSE,TRUE,,,RESERVED (not used)
RO_MISC_ALL_w1,,8,RO,,,,wbmaster_err_wb_adr_cnt,0,8,,0x0,TRUE,FALSE,TRUE,,,Counter for the number of access to unmapped wishbone registers
RO_MISC_TMR_ERR_CNT_ALL_w0,,8,RO,,,,tmr_err_cnt_misc,0,8,,0x0,TRUE,FALSE,TRUE,,,wrap-around SEU error counter. Reset by err_clr (RW_MISC_ALL.misc_rw_0[0]) or hard reset.
